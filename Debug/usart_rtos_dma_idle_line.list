
usart_rtos_dma_idle_line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008034  08008034  00018034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008114  08008114  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800811c  0800811c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800811c  0800811c  0001811c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000110a0  20000074  08008198  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011114  08008198  00021114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f46a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0b  00000000  00000000  0003f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00043420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  00044a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f7e  00000000  00000000  00045ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a393  00000000  00000000  0006ee56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa194  00000000  00000000  000891e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018337d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005edc  00000000  00000000  001833d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800801c 	.word	0x0800801c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800801c 	.word	0x0800801c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_DMA_Init+0x48>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <MX_DMA_Init+0x48>)
 80005c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MX_DMA_Init+0x48>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	2039      	movs	r0, #57	; 0x39
 80005dc:	f000 fdd0 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005e0:	2039      	movs	r0, #57	; 0x39
 80005e2:	f000 fde9 	bl	80011b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2105      	movs	r1, #5
 80005ea:	2045      	movs	r0, #69	; 0x45
 80005ec:	f000 fdc8 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005f0:	2045      	movs	r0, #69	; 0x45
 80005f2:	f000 fde1 	bl	80011b8 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	txQueue = xQueueCreate(10, sizeof(TxPacket_t));
 8000608:	2200      	movs	r2, #0
 800060a:	2121      	movs	r1, #33	; 0x21
 800060c:	200a      	movs	r0, #10
 800060e:	f004 fae1 	bl	8004bd4 <xQueueGenericCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <MX_FREERTOS_Init+0x44>)
 8000616:	6013      	str	r3, [r2, #0]
	if(txQueue == 0)
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_FREERTOS_Init+0x44>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d100      	bne.n	8000622 <MX_FREERTOS_Init+0x1e>
	{
		while(1)
 8000620:	e7fe      	b.n	8000620 <MX_FREERTOS_Init+0x1c>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of usartTask */
  usartTaskHandle = osThreadNew(usartTaskFunc, NULL, &usartTask_attributes);
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <MX_FREERTOS_Init+0x48>)
 8000624:	2100      	movs	r1, #0
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <MX_FREERTOS_Init+0x4c>)
 8000628:	f004 f85a 	bl	80046e0 <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <MX_FREERTOS_Init+0x50>)
 8000630:	6013      	str	r3, [r2, #0]

  /* creation of txTask */
  txTaskHandle = osThreadNew(txTaskFunc, NULL, &txTask_attributes);
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <MX_FREERTOS_Init+0x54>)
 8000634:	2100      	movs	r1, #0
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <MX_FREERTOS_Init+0x58>)
 8000638:	f004 f852 	bl	80046e0 <osThreadNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_FREERTOS_Init+0x5c>)
 8000640:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090
 800064c:	08008078 	.word	0x08008078
 8000650:	08000665 	.word	0x08000665
 8000654:	20010f2c 	.word	0x20010f2c
 8000658:	0800809c 	.word	0x0800809c
 800065c:	080006a9 	.word	0x080006a9
 8000660:	20010f28 	.word	0x20010f28

08000664 <usartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_usartTaskFunc */
void usartTaskFunc(void *argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usartTaskFunc */
	usartStart();
 800066c:	f000 fb3a 	bl	8000ce4 <usartStart>
	TxPacket_t rxPacket;
  /* Infinite loop */
  for(;;)
  {
	  if(usartRecvBlocking(rxPacket.buf, &rxPacket.len))
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	3301      	adds	r3, #1
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb49 	bl	8000d14 <usartRecvBlocking>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f3      	beq.n	8000670 <usartTaskFunc+0xc>
	  {
		  // send data to task send
		  if(xQueueSend(txQueue, &rxPacket, pdMS_TO_TICKS(10)) != pdPASS)
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <usartTaskFunc+0x40>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	f107 010c 	add.w	r1, r7, #12
 8000690:	2300      	movs	r3, #0
 8000692:	220a      	movs	r2, #10
 8000694:	f004 fb3e 	bl	8004d14 <xQueueGenericSend>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d0e8      	beq.n	8000670 <usartTaskFunc+0xc>
		  {
			  Error_Handler();
 800069e:	f000 f925 	bl	80008ec <Error_Handler>
	  if(usartRecvBlocking(rxPacket.buf, &rxPacket.len))
 80006a2:	e7e5      	b.n	8000670 <usartTaskFunc+0xc>
 80006a4:	20000090 	.word	0x20000090

080006a8 <txTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_txTaskFunc */
void txTaskFunc(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN txTaskFunc */
	TxPacket_t txpacket;
	char str[64] = {0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	223c      	movs	r2, #60	; 0x3c
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f007 f885 	bl	80077cc <memset>
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(txQueue, &txpacket, portMAX_DELAY);
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <txTaskFunc+0x6c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80006ca:	f04f 32ff 	mov.w	r2, #4294967295
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fd5c 	bl	800518c <xQueueReceive>
	  sprintf(str, "DMA receive len = %d\r\n", txpacket.len);
 80006d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80006d8:	461a      	mov	r2, r3
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <txTaskFunc+0x70>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f87b 	bl	80077dc <siprintf>
	  usartSendBlocking((uint8_t*)str, strlen(str));
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd90 	bl	8000210 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fb60 	bl	8000dc0 <usartSendBlocking>
	  usartSendBlocking(txpacket.buf, txpacket.len);
 8000700:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000704:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000708:	3301      	adds	r3, #1
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fb57 	bl	8000dc0 <usartSendBlocking>
	  xQueueReceive(txQueue, &txpacket, portMAX_DELAY);
 8000712:	e7d6      	b.n	80006c2 <txTaskFunc+0x1a>
 8000714:	20000090 	.word	0x20000090
 8000718:	08008048 	.word	0x08008048

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_GPIO_Init+0x5c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fc19 	bl	8000fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f80e 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f7ff ffc8 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 800078c:	f7ff ff14 	bl	80005b8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000790:	f000 f9c6 	bl	8000b20 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000794:	f003 ff3a 	bl	800460c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800079c:	f003 ff6a 	bl	8004674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x24>
	...

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0b4      	sub	sp, #208	; 0xd0
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 f80a 	bl	80077cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2284      	movs	r2, #132	; 0x84
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f006 fffb 	bl	80077cc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d6:	f001 fab3 	bl	8001d40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <SystemClock_Config+0x11c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a38      	ldr	r2, [pc, #224]	; (80008c0 <SystemClock_Config+0x11c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <SystemClock_Config+0x11c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <SystemClock_Config+0x120>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <SystemClock_Config+0x120>)
 80007f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <SystemClock_Config+0x120>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000826:	230c      	movs	r3, #12
 8000828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 800082c:	23c0      	movs	r3, #192	; 0xc0
 800082e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fadc 	bl	8001e00 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800084e:	f000 f84d 	bl	80008ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000852:	f001 fa85 	bl	8001d60 <HAL_PWREx_EnableOverDrive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800085c:	f000 f846 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000872:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000882:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000886:	2106      	movs	r1, #6
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fd5d 	bl	8002348 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000894:	f000 f82a 	bl	80008ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800089c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800089e:	2300      	movs	r3, #0
 80008a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 ff56 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80008b2:	f000 f81b 	bl	80008ec <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	37d0      	adds	r7, #208	; 0xd0
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008da:	f000 fb79 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40001000 	.word	0x40001000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fc23 	bl	8001180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2036      	movs	r0, #54	; 0x36
 800095e:	f000 fc0f 	bl	8001180 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000962:	2036      	movs	r0, #54	; 0x36
 8000964:	f000 fc28 	bl	80011b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_InitTick+0xa0>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <HAL_InitTick+0xa0>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_InitTick+0xa0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000980:	f107 0210 	add.w	r2, r7, #16
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 feb2 	bl	80026f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000990:	f001 fe88 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8000994:	4603      	mov	r3, r0
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_InitTick+0xa4>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	3b01      	subs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_InitTick+0xa8>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_InitTick+0xac>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_InitTick+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_InitTick+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_InitTick+0xa8>)
 80009ca:	f002 fab5 	bl	8002f38 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <HAL_InitTick+0xa8>)
 80009d6:	f002 fb11 	bl	8002ffc <HAL_TIM_Base_Start_IT>
 80009da:	4603      	mov	r3, r0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	20010f30 	.word	0x20010f30
 80009f4:	40001000 	.word	0x40001000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM6_DAC_IRQHandler+0x10>)
 8000a2a:	f002 fb5f 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20010f30 	.word	0x20010f30

08000a38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <DMA2_Stream1_IRQHandler+0x10>)
 8000a3e:	f000 fd69 	bl	8001514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20010f7c 	.word	0x20010f7c

08000a4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA2_Stream6_IRQHandler+0x10>)
 8000a52:	f000 fd5f 	bl	8001514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20010fdc 	.word	0x20010fdc

08000a60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <USART6_IRQHandler+0x2c>)
 8000a66:	f002 fe51 	bl	800370c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <USART6_IRQHandler+0x2c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b10      	cmp	r3, #16
 8000a76:	d106      	bne.n	8000a86 <USART6_IRQHandler+0x26>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <USART6_IRQHandler+0x2c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2210      	movs	r2, #16
 8000a7e:	621a      	str	r2, [r3, #32]
	  HAL_UART_RxCpltCallback(&huart6);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <USART6_IRQHandler+0x2c>)
 8000a82:	f000 fa39 	bl	8000ef8 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART6_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2001103c 	.word	0x2001103c

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f006 fe4c 	bl	800775c <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20050000 	.word	0x20050000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000094 	.word	0x20000094
 8000af8:	20011118 	.word	0x20011118

08000afc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART6_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b64:	f002 fcc8 	bl	80034f8 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f7ff febd 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2001103c 	.word	0x2001103c
 8000b7c:	40011400 	.word	0x40011400

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <HAL_UART_MspInit+0x148>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	f040 808d 	bne.w	8000cbe <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ba4:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a48      	ldr	r2, [pc, #288]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb0:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <HAL_UART_MspInit+0x14c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000bd4:	23c0      	movs	r3, #192	; 0xc0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000be4:	2308      	movs	r3, #8
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4838      	ldr	r0, [pc, #224]	; (8000cd0 <HAL_UART_MspInit+0x150>)
 8000bf0:	f000 fefa 	bl	80019e8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000bf6:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <HAL_UART_MspInit+0x158>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000bfa:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000bfc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c28:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c36:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c38:	f000 facc 	bl	80011d4 <HAL_DMA_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000c42:	f7ff fe53 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c4a:	671a      	str	r2, [r3, #112]	; 0x70
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <HAL_UART_MspInit+0x154>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <HAL_UART_MspInit+0x160>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c5a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000c92:	4812      	ldr	r0, [pc, #72]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000c94:	f000 fa9e 	bl	80011d4 <HAL_DMA_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8000c9e:	f7ff fe25 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000ca6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_UART_MspInit+0x15c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	2047      	movs	r0, #71	; 0x47
 8000cb4:	f000 fa64 	bl	8001180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cb8:	2047      	movs	r0, #71	; 0x47
 8000cba:	f000 fa7d 	bl	80011b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40011400 	.word	0x40011400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	20010f7c 	.word	0x20010f7c
 8000cd8:	40026428 	.word	0x40026428
 8000cdc:	20010fdc 	.word	0x20010fdc
 8000ce0:	400264a0 	.word	0x400264a0

08000ce4 <usartStart>:
/* USER CODE BEGIN 1 */

/**
 * @brief Start receive data
 */
void usartStart(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	usartInit();
 8000ce8:	f000 f8aa 	bl	8000e40 <usartInit>
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <usartStart+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <usartStart+0x28>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0210 	orr.w	r2, r2, #16
 8000cfa:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart6, dma_rxbuf, USART_DMA_BUF_SIZE);
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	4904      	ldr	r1, [pc, #16]	; (8000d10 <usartStart+0x2c>)
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <usartStart+0x28>)
 8000d02:	f002 fcc5 	bl	8003690 <HAL_UART_Receive_DMA>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2001103c 	.word	0x2001103c
 8000d10:	20000194 	.word	0x20000194

08000d14 <usartRecvBlocking>:

bool usartRecvBlocking(uint8_t *data, uint8_t *dataLen) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	uint8_t cpos;
//	uint8_t i;

	if (data == NULL || dataLen == NULL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <usartRecvBlocking+0x16>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <usartRecvBlocking+0x1a>
		return false;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e03c      	b.n	8000da8 <usartRecvBlocking+0x94>

	xSemaphoreTake(usartRxNotify, portMAX_DELAY);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <usartRecvBlocking+0x9c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f04f 31ff 	mov.w	r1, #4294967295
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fb0e 	bl	8005358 <xQueueSemaphoreTake>
	cpos = (USART_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart6.hdmarx));
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <usartRecvBlocking+0xa0>)
 8000d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d4a:	73fb      	strb	r3, [r7, #15]
	dataLen[0] = 0;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

	// Copy data
	while(lpos != cpos)
 8000d52:	e01d      	b.n	8000d90 <usartRecvBlocking+0x7c>
	{
		data[dataLen[0]] = dma_rxbuf[lpos];
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <usartRecvBlocking+0xa4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <usartRecvBlocking+0xa8>)
 8000d66:	5c52      	ldrb	r2, [r2, r1]
 8000d68:	701a      	strb	r2, [r3, #0]
		dataLen[0]++;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
		lpos = (lpos + 1) % USART_BUF_SIZE;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <usartRecvBlocking+0xa4>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	425a      	negs	r2, r3
 8000d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d86:	bf58      	it	pl
 8000d88:	4253      	negpl	r3, r2
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <usartRecvBlocking+0xa4>)
 8000d8e:	701a      	strb	r2, [r3, #0]
	while(lpos != cpos)
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <usartRecvBlocking+0xa4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d1dc      	bne.n	8000d54 <usartRecvBlocking+0x40>
	}

	return dataLen[0] ? true : false;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
//	}
//
//	lpos = cpos;
//
//	return true;
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000098 	.word	0x20000098
 8000db4:	2001103c 	.word	0x2001103c
 8000db8:	20000214 	.word	0x20000214
 8000dbc:	20000194 	.word	0x20000194

08000dc0 <usartSendBlocking>:

void usartSendBlocking(uint8_t *data, uint8_t dataLen) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	xSemaphoreTake(usartBuzzy, portMAX_DELAY);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <usartSendBlocking+0x70>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fabf 	bl	8005358 <xQueueSemaphoreTake>

	// give data to dma
	for (i = 0; i < dataLen; i++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e009      	b.n	8000df4 <usartSendBlocking+0x34>
		dma_txbuf[i] = data[i];
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	441a      	add	r2, r3
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	7811      	ldrb	r1, [r2, #0]
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <usartSendBlocking+0x74>)
 8000dec:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < dataLen; i++) {
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3f1      	bcc.n	8000de0 <usartSendBlocking+0x20>
	}
	HAL_UART_Transmit_DMA(&huart6, dma_txbuf, dataLen);
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <usartSendBlocking+0x74>)
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <usartSendBlocking+0x78>)
 8000e06:	f002 fbc5 	bl	8003594 <HAL_UART_Transmit_DMA>

	// wait for dma done
	xSemaphoreTake(usartTxNotify, portMAX_DELAY);
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <usartSendBlocking+0x7c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 faa0 	bl	8005358 <xQueueSemaphoreTake>
	xSemaphoreGive(usartBuzzy);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <usartSendBlocking+0x70>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	f003 ff77 	bl	8004d14 <xQueueGenericSend>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000140 	.word	0x20000140
 8000e34:	200001d4 	.word	0x200001d4
 8000e38:	2001103c 	.word	0x2001103c
 8000e3c:	200000ec 	.word	0x200000ec

08000e40 <usartInit>:

static void usartInit(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af02      	add	r7, sp, #8
	// initialize some of variable freeRTOS
	usartRxNotify = xSemaphoreCreateCountingStatic(10, 0, &usartRxNotifyBuf);
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <usartInit+0x5c>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f003 ff27 	bl	8004c9e <xQueueCreateCountingSemaphoreStatic>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <usartInit+0x60>)
 8000e54:	6013      	str	r3, [r2, #0]
	usartTxNotify = xSemaphoreCreateBinaryStatic(&usartTxNotifyBuf);
 8000e56:	2303      	movs	r3, #3
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <usartInit+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2001      	movs	r0, #1
 8000e62:	f003 fe35 	bl	8004ad0 <xQueueGenericCreateStatic>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <usartInit+0x68>)
 8000e6a:	6013      	str	r3, [r2, #0]
	usartBuzzy = xSemaphoreCreateBinaryStatic(&usartBuzzyBuf);
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <usartInit+0x6c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2001      	movs	r0, #1
 8000e78:	f003 fe2a 	bl	8004ad0 <xQueueGenericCreateStatic>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <usartInit+0x70>)
 8000e80:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(usartBuzzy);	// usart not buzzy at first run
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <usartInit+0x70>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f003 ff42 	bl	8004d14 <xQueueGenericSend>
	lpos = 0;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <usartInit+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	20000098 	.word	0x20000098
 8000ea4:	200000f0 	.word	0x200000f0
 8000ea8:	200000ec 	.word	0x200000ec
 8000eac:	20000144 	.word	0x20000144
 8000eb0:	20000140 	.word	0x20000140
 8000eb4:	20000214 	.word	0x20000214

08000eb8 <usartRecv>:

static void usartRecv(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(usartRxNotify, &pxHigherPriorityTaskWoken);
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <usartRecv+0x38>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 f8c8 	bl	8005060 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <usartRecv+0x2e>
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <usartRecv+0x3c>)
 8000ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	f3bf 8f6f 	isb	sy
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000098 	.word	0x20000098
 8000ef4:	e000ed04 	.word	0xe000ed04

08000ef8 <HAL_UART_RxCpltCallback>:

// interrupt callback
__USED void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	usartRecv();
 8000f00:	f7ff ffda 	bl	8000eb8 <usartRecv>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_UART_RxHalfCpltCallback>:

__USED void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	usartRecv();
 8000f14:	f7ff ffd0 	bl	8000eb8 <usartRecv>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_UART_TxCpltCallback>:

__USED void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(usartTxNotify, &pxHigherPriorityTaskWoken);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_TxCpltCallback+0x3c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 f892 	bl	8005060 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <HAL_UART_TxCpltCallback+0x32>
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_UART_TxCpltCallback+0x40>)
 8000f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	f3bf 8f4f 	dsb	sy
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000ec 	.word	0x200000ec
 8000f60:	e000ed04 	.word	0xe000ed04

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff fdb5 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f006 fbe9 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fbf1 	bl	800077c <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fa8:	08008124 	.word	0x08008124
  ldr r2, =_sbss
 8000fac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fb0:	20011114 	.word	0x20011114

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>

08000fb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f8d5 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fcc1 	bl	8000948 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc6:	f7ff fc97 	bl	80008f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200110c0 	.word	0x200110c0

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200110c0 	.word	0x200110c0

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ff0a 	bl	8000ff8 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e099      	b.n	8001324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e00f      	b.n	8001232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fef1 	bl	8000ff8 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d908      	bls.n	8001232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e078      	b.n	8001324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_DMA_Init+0x158>)
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4313      	orrs	r3, r2
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d117      	bne.n	80012f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fb09 	bl	80018f0 <DMA_CheckFifoParam>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012f2:	2301      	movs	r3, #1
 80012f4:	e016      	b.n	8001324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fac0 	bl	8001884 <DMA_CalcBaseAndBitshift>
 8001304:	4603      	mov	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	223f      	movs	r2, #63	; 0x3f
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f010803f 	.word	0xf010803f

08001330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_DMA_Start_IT+0x26>
 8001352:	2302      	movs	r3, #2
 8001354:	e048      	b.n	80013e8 <HAL_DMA_Start_IT+0xb8>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d137      	bne.n	80013da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa52 	bl	8001828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	223f      	movs	r2, #63	; 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0216 	orr.w	r2, r2, #22
 800139e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0208 	orr.w	r2, r2, #8
 80013c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e005      	b.n	80013e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013e2:	2302      	movs	r3, #2
 80013e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f7ff fdfb 	bl	8000ff8 <HAL_GetTick>
 8001402:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e052      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0216 	bic.w	r2, r2, #22
 8001430:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001440:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <HAL_DMA_Abort+0x62>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	e013      	b.n	800149c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001474:	f7ff fdc0 	bl	8000ff8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d90c      	bls.n	800149c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2220      	movs	r2, #32
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e015      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e4      	bne.n	8001474 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00c      	b.n	8001508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_DMA_IRQHandler+0x258>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <HAL_DMA_IRQHandler+0x25c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2208      	movs	r2, #8
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0204 	bic.w	r2, r2, #4
 8001566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	2208      	movs	r2, #8
 800156e:	409a      	lsls	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	2201      	movs	r2, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	f043 0202 	orr.w	r2, r3, #2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2204      	movs	r2, #4
 80015bc:	409a      	lsls	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2204      	movs	r2, #4
 80015da:	409a      	lsls	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f043 0204 	orr.w	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	2210      	movs	r2, #16
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d043      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03c      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2210      	movs	r2, #16
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d018      	beq.n	8001656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d108      	bne.n	8001644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d024      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
 8001642:	e01f      	b.n	8001684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
 8001654:	e016      	b.n	8001684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0208 	bic.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2220      	movs	r2, #32
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 808e 	beq.w	80017b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8086 	beq.w	80017b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2220      	movs	r2, #32
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d136      	bne.n	800172c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0216 	bic.w	r2, r2, #22
 80016cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <HAL_DMA_IRQHandler+0x1da>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0208 	bic.w	r2, r2, #8
 80016fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	223f      	movs	r2, #63	; 0x3f
 8001704:	409a      	lsls	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	2b00      	cmp	r3, #0
 8001720:	d07d      	beq.n	800181e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
        }
        return;
 800172a:	e078      	b.n	800181e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01c      	beq.n	8001774 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d108      	bne.n	800175a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	2b00      	cmp	r3, #0
 800174e:	d030      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
 8001758:	e02b      	b.n	80017b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d027      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
 800176a:	e022      	b.n	80017b2 <HAL_DMA_IRQHandler+0x29e>
 800176c:	20000000 	.word	0x20000000
 8001770:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0210 	bic.w	r2, r2, #16
 8001790:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d032      	beq.n	8001820 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d022      	beq.n	800180c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d307      	bcc.n	80017fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f2      	bne.n	80017de <HAL_DMA_IRQHandler+0x2ca>
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
 800181c:	e000      	b.n	8001820 <HAL_DMA_IRQHandler+0x30c>
        return;
 800181e:	bf00      	nop
    }
  }
}
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop

08001828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	d108      	bne.n	8001868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001866:	e007      	b.n	8001878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3b10      	subs	r3, #16
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <DMA_CalcBaseAndBitshift+0x60>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <DMA_CalcBaseAndBitshift+0x64>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d908      	bls.n	80018c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <DMA_CalcBaseAndBitshift+0x68>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	1d1a      	adds	r2, r3, #4
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	659a      	str	r2, [r3, #88]	; 0x58
 80018c2:	e006      	b.n	80018d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <DMA_CalcBaseAndBitshift+0x68>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	aaaaaaab 	.word	0xaaaaaaab
 80018e8:	080080d8 	.word	0x080080d8
 80018ec:	fffffc00 	.word	0xfffffc00

080018f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d11f      	bne.n	800194a <DMA_CheckFifoParam+0x5a>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d856      	bhi.n	80019be <DMA_CheckFifoParam+0xce>
 8001910:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <DMA_CheckFifoParam+0x28>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	08001929 	.word	0x08001929
 800191c:	0800193b 	.word	0x0800193b
 8001920:	08001929 	.word	0x08001929
 8001924:	080019bf 	.word	0x080019bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d046      	beq.n	80019c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001938:	e043      	b.n	80019c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001942:	d140      	bne.n	80019c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001948:	e03d      	b.n	80019c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001952:	d121      	bne.n	8001998 <DMA_CheckFifoParam+0xa8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d837      	bhi.n	80019ca <DMA_CheckFifoParam+0xda>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <DMA_CheckFifoParam+0x70>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001971 	.word	0x08001971
 8001964:	08001977 	.word	0x08001977
 8001968:	08001971 	.word	0x08001971
 800196c:	08001989 	.word	0x08001989
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      break;
 8001974:	e030      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d025      	beq.n	80019ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001986:	e022      	b.n	80019ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001990:	d11f      	bne.n	80019d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001996:	e01c      	b.n	80019d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d903      	bls.n	80019a6 <DMA_CheckFifoParam+0xb6>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d003      	beq.n	80019ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019a4:	e018      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
      break;
 80019aa:	e015      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00e      	beq.n	80019d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
      break;
 80019bc:	e00b      	b.n	80019d6 <DMA_CheckFifoParam+0xe6>
      break;
 80019be:	bf00      	nop
 80019c0:	e00a      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e008      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
 80019c8:	e006      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ca:	bf00      	nop
 80019cc:	e004      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
 80019d0:	e002      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019d2:	bf00      	nop
 80019d4:	e000      	b.n	80019d8 <DMA_CheckFifoParam+0xe8>
      break;
 80019d6:	bf00      	nop
    }
  } 
  
  return status; 
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e175      	b.n	8001cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8164 	bne.w	8001cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00b      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x100>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80be 	beq.w	8001cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8a:	4a61      	ldr	r2, [pc, #388]	; (8001d10 <HAL_GPIO_Init+0x328>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d037      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a55      	ldr	r2, [pc, #340]	; (8001d20 <HAL_GPIO_Init+0x338>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <HAL_GPIO_Init+0x340>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_GPIO_Init+0x344>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x348>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x222>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x21e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bfe:	2309      	movs	r3, #9
 8001c00:	e012      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c02:	230a      	movs	r3, #10
 8001c04:	e010      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x328>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6a:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae86 	bls.w	8001a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40022400 	.word	0x40022400
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8e:	f7ff f933 	bl	8000ff8 <HAL_GetTick>
 8001d92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d94:	e009      	b.n	8001daa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d96:	f7ff f92f 	bl	8000ff8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da4:	d901      	bls.n	8001daa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e022      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d1ee      	bne.n	8001d96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f918 	bl	8000ff8 <HAL_GetTick>
 8001dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dcc:	f7ff f914 	bl	8000ff8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e007      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e291      	b.n	800233a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8087 	beq.w	8001f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e24:	4b96      	ldr	r3, [pc, #600]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d00c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e30:	4b93      	ldr	r3, [pc, #588]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d112      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
 8001e3c:	4b90      	ldr	r3, [pc, #576]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e48:	d10b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4a:	4b8d      	ldr	r3, [pc, #564]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x130>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d168      	bne.n	8001f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26b      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7a>
 8001e6c:	4b84      	ldr	r3, [pc, #528]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a83      	ldr	r2, [pc, #524]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e02e      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x9c>
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7e      	ldr	r2, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b7c      	ldr	r3, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7b      	ldr	r2, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xc0>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a72      	ldr	r2, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6b      	ldr	r2, [pc, #428]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f88a 	bl	8000ff8 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f886 	bl	8000ff8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e21f      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xe8>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f876 	bl	8000ff8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f872 	bl	8000ff8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e20b      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x110>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d069      	beq.n	8002012 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x190>
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1df      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	493d      	ldr	r1, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e040      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a38      	ldr	r2, [pc, #224]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f828 	bl	8000ff8 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f824 	bl	8000ff8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1bd      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4929      	ldr	r1, [pc, #164]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
 8001fde:	e018      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f804 	bl	8000ff8 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff f800 	bl	8000ff8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e199      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d038      	beq.n	8002090 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe ffe1 	bl	8000ff8 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe ffdd 	bl	8000ff8 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e176      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x23a>
 8002058:	e01a      	b.n	8002090 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe ffc7 	bl	8000ff8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7fe ffc3 	bl	8000ff8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d903      	bls.n	8002084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e15c      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
 8002080:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b91      	ldr	r3, [pc, #580]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a4 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7fe ff8b 	bl	8000ff8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe ff87 	bl	8000ff8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e120      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x31a>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x33c>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x35e>
 8002144:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe ff3b 	bl	8000ff8 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe ff37 	bl	8000ff8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0ce      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x386>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7fe ff25 	bl	8000ff8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe ff21 	bl	8000ff8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80a4 	beq.w	8002338 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d06b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d149      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800220a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fef2 	bl	8000ff8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe feee 	bl	8000ff8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e087      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	4313      	orrs	r3, r2
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800225e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002262:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fec2 	bl	8000ff8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe febe 	bl	8000ff8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e057      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x478>
 8002296:	e04f      	b.n	8002338 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800229e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7fe fea8 	bl	8000ff8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fea4 	bl	8000ff8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e03d      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x4ac>
 80022ca:	e035      	b.n	8002338 <HAL_RCC_OscConfig+0x538>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x544>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d0      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4965      	ldr	r1, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e073      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4936      	ldr	r1, [pc, #216]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243c:	f7fe fddc 	bl	8000ff8 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe fdd8 	bl	8000ff8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e053      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1d0>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fa24 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	080080c0 	.word	0x080080c0
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002526:	2100      	movs	r1, #0
 8002528:	6079      	str	r1, [r7, #4]
 800252a:	2100      	movs	r1, #0
 800252c:	60f9      	str	r1, [r7, #12]
 800252e:	2100      	movs	r1, #0
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002532:	2100      	movs	r1, #0
 8002534:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002536:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 8002538:	6889      	ldr	r1, [r1, #8]
 800253a:	f001 010c 	and.w	r1, r1, #12
 800253e:	2908      	cmp	r1, #8
 8002540:	d00d      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x3e>
 8002542:	2908      	cmp	r1, #8
 8002544:	f200 8094 	bhi.w	8002670 <HAL_RCC_GetSysClockFreq+0x150>
 8002548:	2900      	cmp	r1, #0
 800254a:	d002      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x32>
 800254c:	2904      	cmp	r1, #4
 800254e:	d003      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x38>
 8002550:	e08e      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002552:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCC_GetSysClockFreq+0x164>)
 8002554:	60bb      	str	r3, [r7, #8]
      break;
 8002556:	e08e      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002558:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_GetSysClockFreq+0x168>)
 800255a:	60bb      	str	r3, [r7, #8]
      break;
 800255c:	e08b      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255e:	4948      	ldr	r1, [pc, #288]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 8002560:	6849      	ldr	r1, [r1, #4]
 8002562:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002566:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002568:	4945      	ldr	r1, [pc, #276]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 800256a:	6849      	ldr	r1, [r1, #4]
 800256c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002570:	2900      	cmp	r1, #0
 8002572:	d024      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002574:	4942      	ldr	r1, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 8002576:	6849      	ldr	r1, [r1, #4]
 8002578:	0989      	lsrs	r1, r1, #6
 800257a:	4608      	mov	r0, r1
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002584:	f04f 0500 	mov.w	r5, #0
 8002588:	ea00 0204 	and.w	r2, r0, r4
 800258c:	ea01 0305 	and.w	r3, r1, r5
 8002590:	493d      	ldr	r1, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x168>)
 8002592:	fb01 f003 	mul.w	r0, r1, r3
 8002596:	2100      	movs	r1, #0
 8002598:	fb01 f102 	mul.w	r1, r1, r2
 800259c:	1844      	adds	r4, r0, r1
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x168>)
 80025a0:	fba2 0101 	umull	r0, r1, r2, r1
 80025a4:	1863      	adds	r3, r4, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	f7fd fe86 	bl	80002c0 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e04a      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	461a      	mov	r2, r3
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	ea02 0400 	and.w	r4, r2, r0
 80025d6:	ea03 0501 	and.w	r5, r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	014b      	lsls	r3, r1, #5
 80025e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025ec:	0142      	lsls	r2, r0, #5
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	1b00      	subs	r0, r0, r4
 80025f4:	eb61 0105 	sbc.w	r1, r1, r5
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002606:	0182      	lsls	r2, r0, #6
 8002608:	1a12      	subs	r2, r2, r0
 800260a:	eb63 0301 	sbc.w	r3, r3, r1
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	00d9      	lsls	r1, r3, #3
 8002618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800261c:	00d0      	lsls	r0, r2, #3
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	1912      	adds	r2, r2, r4
 8002624:	eb45 0303 	adc.w	r3, r5, r3
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0299      	lsls	r1, r3, #10
 8002632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002636:	0290      	lsls	r0, r2, #10
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	f7fd fe3a 	bl	80002c0 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4613      	mov	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetSysClockFreq+0x160>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	0c1b      	lsrs	r3, r3, #16
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	3301      	adds	r3, #1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	60bb      	str	r3, [r7, #8]
      break;
 800266e:	e002      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_RCC_GetSysClockFreq+0x164>)
 8002672:	60bb      	str	r3, [r7, #8]
      break;
 8002674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002676:	68bb      	ldr	r3, [r7, #8]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	080080d0 	.word	0x080080d0

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffdc 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0b5b      	lsrs	r3, r3, #13
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	080080d0 	.word	0x080080d0

080026f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	220f      	movs	r2, #15
 8002702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCC_GetClockConfig+0x60>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a68      	ldr	r2, [pc, #416]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	4964      	ldr	r1, [pc, #400]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d017      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	4959      	ldr	r1, [pc, #356]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d0:	d101      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d017      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ee:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	494a      	ldr	r1, [pc, #296]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 808b 	beq.w	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a39      	ldr	r2, [pc, #228]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a34      	ldr	r2, [pc, #208]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe fbca 	bl	8000ff8 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fbc6 	bl	8000ff8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e357      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d035      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d02e      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d114      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fb8e 	bl	8000ff8 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe fb8a 	bl	8000ff8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e319      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ee      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800290e:	d111      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800291e:	400b      	ands	r3, r1
 8002920:	4901      	ldr	r1, [pc, #4]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
 8002926:	e00b      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	0ffffcff 	.word	0x0ffffcff
 8002934:	4bb1      	ldr	r3, [pc, #708]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4ab0      	ldr	r2, [pc, #704]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800293a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800293e:	6093      	str	r3, [r2, #8]
 8002940:	4bae      	ldr	r3, [pc, #696]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	49ab      	ldr	r1, [pc, #684]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800295e:	4ba7      	ldr	r3, [pc, #668]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002964:	4aa5      	ldr	r2, [pc, #660]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800296e:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002970:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	49a0      	ldr	r1, [pc, #640]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298c:	4b9b      	ldr	r3, [pc, #620]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299a:	4998      	ldr	r1, [pc, #608]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ae:	4b93      	ldr	r3, [pc, #588]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029bc:	498f      	ldr	r1, [pc, #572]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d0:	4b8a      	ldr	r3, [pc, #552]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029de:	4987      	ldr	r1, [pc, #540]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029f2:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	497e      	ldr	r1, [pc, #504]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a14:	4b79      	ldr	r3, [pc, #484]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4976      	ldr	r1, [pc, #472]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a36:	4b71      	ldr	r3, [pc, #452]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f023 020c 	bic.w	r2, r3, #12
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	496d      	ldr	r1, [pc, #436]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4965      	ldr	r1, [pc, #404]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a7a:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a88:	495c      	ldr	r1, [pc, #368]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4954      	ldr	r1, [pc, #336]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002abe:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	494b      	ldr	r1, [pc, #300]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	4943      	ldr	r1, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	493a      	ldr	r1, [pc, #232]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b32:	4932      	ldr	r1, [pc, #200]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d011      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	4929      	ldr	r1, [pc, #164]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	4919      	ldr	r1, [pc, #100]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb8:	4910      	ldr	r1, [pc, #64]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d9 	beq.w	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe fa0a 	bl	8000ff8 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be6:	e00b      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002be8:	f7fe fa06 	bl	8000ff8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d904      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e197      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c00:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ed      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d021      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11d      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2e:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	019a      	lsls	r2, r3, #6
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	071b      	lsls	r3, r3, #28
 8002c54:	4957      	ldr	r1, [pc, #348]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c86:	d129      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c88:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9c:	0f1b      	lsrs	r3, r3, #28
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	019a      	lsls	r2, r3, #6
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	071b      	lsls	r3, r3, #28
 8002cbc:	493d      	ldr	r1, [pc, #244]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cca:	f023 021f 	bic.w	r2, r3, #31
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4937      	ldr	r1, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01d      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cee:	0e1b      	lsrs	r3, r3, #24
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfc:	0f1b      	lsrs	r3, r3, #28
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	019a      	lsls	r2, r3, #6
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	071b      	lsls	r3, r3, #28
 8002d1c:	4925      	ldr	r1, [pc, #148]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	019a      	lsls	r2, r3, #6
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	071b      	lsls	r3, r3, #28
 8002d4c:	4919      	ldr	r1, [pc, #100]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d54:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d60:	f7fe f94a 	bl	8000ff8 <HAL_GetTick>
 8002d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d68:	f7fe f946 	bl	8000ff8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0d7      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 80cd 	bne.w	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f92d 	bl	8000ff8 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002da2:	f7fe f929 	bl	8000ff8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	; 0x64
 8002dae:	d903      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0ba      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d0ed      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d12a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dee:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dfc:	4b4d      	ldr	r3, [pc, #308]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	0f1b      	lsrs	r3, r3, #28
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	019a      	lsls	r2, r3, #6
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	4944      	ldr	r1, [pc, #272]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e2a:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	493d      	ldr	r1, [pc, #244]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d022      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e58:	d11d      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	0e1b      	lsrs	r3, r3, #24
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	0f1b      	lsrs	r3, r3, #28
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	019a      	lsls	r2, r3, #6
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	071b      	lsls	r3, r3, #28
 8002e8e:	4929      	ldr	r1, [pc, #164]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	0e1b      	lsrs	r3, r3, #24
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	019a      	lsls	r2, r3, #6
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	071b      	lsls	r3, r3, #28
 8002ed6:	4917      	ldr	r1, [pc, #92]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4911      	ldr	r1, [pc, #68]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fe f87a 	bl	8000ff8 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f08:	f7fe f876 	bl	8000ff8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e007      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f26:	d1ef      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e049      	b.n	8002fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f841 	bl	8002fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 fa00 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e054      	b.n	80030be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d01d      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a21      	ldr	r2, [pc, #132]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_TIM_Base_Start_IT+0xe0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d115      	bne.n	80030a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_TIM_Base_Start_IT+0xec>)
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d015      	beq.n	80030ba <HAL_TIM_Base_Start_IT+0xbe>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d011      	beq.n	80030ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	e008      	b.n	80030ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e000      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40010400 	.word	0x40010400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40001800 	.word	0x40001800
 80030e8:	00010007 	.word	0x00010007

080030ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b02      	cmp	r3, #2
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0202 	mvn.w	r2, #2
 8003118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f905 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8f7 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f908 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0204 	mvn.w	r2, #4
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8db 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8cd 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8de 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0208 	mvn.w	r2, #8
 80031c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2204      	movs	r2, #4
 80031c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8b1 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f8a3 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8b4 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0210 	mvn.w	r2, #16
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2208      	movs	r2, #8
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f887 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f879 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f88a 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0201 	mvn.w	r2, #1
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fb2c 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f91a 	bl	80034d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	d10e      	bne.n	80032ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d107      	bne.n	80032ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f90d 	bl	80034e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d10e      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f838 	bl	8003366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b20      	cmp	r3, #32
 8003302:	d10e      	bne.n	8003322 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	d107      	bne.n	8003322 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0220 	mvn.w	r2, #32
 800331a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8cd 	bl	80034bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <TIM_Base_SetConfig+0x114>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d00f      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <TIM_Base_SetConfig+0x118>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3b      	ldr	r2, [pc, #236]	; (800349c <TIM_Base_SetConfig+0x120>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d108      	bne.n	80033ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <TIM_Base_SetConfig+0x114>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d027      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <TIM_Base_SetConfig+0x118>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d023      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2a      	ldr	r2, [pc, #168]	; (800349c <TIM_Base_SetConfig+0x120>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d017      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <TIM_Base_SetConfig+0x128>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <TIM_Base_SetConfig+0x12c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <TIM_Base_SetConfig+0x130>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_Base_SetConfig+0x134>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <TIM_Base_SetConfig+0x138>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <TIM_Base_SetConfig+0x13c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_Base_SetConfig+0xf8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800
 80034b0:	40001800 	.word	0x40001800
 80034b4:	40001c00 	.word	0x40001c00
 80034b8:	40002000 	.word	0x40002000

080034bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e040      	b.n	800358c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fb30 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 faf4 	bl	8003b24 <UART_SetConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e022      	b.n	800358c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fd4a 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fdd1 	bl	800412c <UART_CheckIdleState>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d166      	bne.n	8003678 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_Transmit_DMA+0x22>
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e05f      	b.n	800367a <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit_DMA+0x34>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e058      	b.n	800367a <HAL_UART_Transmit_DMA+0xe6>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02b      	beq.n	8003654 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_UART_Transmit_DMA+0xf0>)
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_UART_Transmit_DMA+0xf4>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <HAL_UART_Transmit_DMA+0xf8>)
 8003612:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	2200      	movs	r2, #0
 800361a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4619      	mov	r1, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	461a      	mov	r2, r3
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	f7fd fe7e 	bl	8001330 <HAL_DMA_Start_IT>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2210      	movs	r2, #16
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e012      	b.n	800367a <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003672:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	080043ed 	.word	0x080043ed
 8003688:	0800443d 	.word	0x0800443d
 800368c:	08004525 	.word	0x08004525

08003690 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d12c      	bne.n	8003700 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_UART_Receive_DMA+0x22>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e025      	b.n	8003702 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Receive_DMA+0x34>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e01e      	b.n	8003702 <HAL_UART_Receive_DMA+0x72>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036ee:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fdc8 	bl	800428c <UART_Start_Receive_DMA>
 80036fc:	4603      	mov	r3, r0
 80036fe:	e000      	b.n	8003702 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 81b9 	beq.w	8003acc <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
      }
      return;
 8003762:	e1b3      	b.n	8003acc <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80e3 	beq.w	8003932 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <HAL_UART_IRQHandler+0x304>)
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80d8 	beq.w	8003932 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_UART_IRQHandler+0xa2>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_UART_IRQHandler+0xce>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2202      	movs	r2, #2
 80037c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_UART_IRQHandler+0xfa>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	f043 0208 	orr.w	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d011      	beq.n	800386a <HAL_UART_IRQHandler+0x15e>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 812d 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d004      	beq.n	80038ba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d031      	beq.n	800391e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fd67 	bl	800438e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d123      	bne.n	8003916 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d013      	beq.n	800390e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_UART_IRQHandler+0x308>)
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fdec 	bl	80014d0 <HAL_DMA_Abort_IT>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d017      	beq.n	800392e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003908:	4610      	mov	r0, r2
 800390a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e00f      	b.n	800392e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8f2 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	e00b      	b.n	800392e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8ee 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e007      	b.n	800392e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8ea 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800392c:	e0d0      	b.n	8003ad0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392e:	bf00      	nop
    return;
 8003930:	e0ce      	b.n	8003ad0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2b01      	cmp	r3, #1
 8003938:	f040 80a7 	bne.w	8003a8a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a1 	beq.w	8003a8a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 809b 	beq.w	8003a8a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d156      	bne.n	8003a18 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80ac 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003982:	893a      	ldrh	r2, [r7, #8]
 8003984:	429a      	cmp	r2, r3
 8003986:	f080 80a5 	bcs.w	8003ad4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399c:	d02a      	beq.n	80039f4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0210 	bic.w	r2, r2, #16
 80039e8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fcfe 	bl	80013f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f87f 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a0e:	e061      	b.n	8003ad4 <HAL_UART_IRQHandler+0x3c8>
 8003a10:	04000120 	.word	0x04000120
 8003a14:	080045a1 	.word	0x080045a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d050      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d04d      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0210 	bic.w	r2, r2, #16
 8003a7c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f842 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a88:	e026      	b.n	8003ad8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01a      	beq.n	8003adc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
    }
    return;
 8003aae:	e015      	b.n	8003adc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_UART_IRQHandler+0x3d2>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fd81 	bl	80045cc <UART_EndTransmit_IT>
    return;
 8003aca:	e008      	b.n	8003ade <HAL_UART_IRQHandler+0x3d2>
      return;
 8003acc:	bf00      	nop
 8003ace:	e006      	b.n	8003ade <HAL_UART_IRQHandler+0x3d2>
    return;
 8003ad0:	bf00      	nop
 8003ad2:	e004      	b.n	8003ade <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_UART_IRQHandler+0x3d2>
    return;
 8003adc:	bf00      	nop
  }

}
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4ba7      	ldr	r3, [pc, #668]	; (8003dec <UART_SetConfig+0x2c8>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a95      	ldr	r2, [pc, #596]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d120      	bne.n	8003be2 <UART_SetConfig+0xbe>
 8003ba0:	4b94      	ldr	r3, [pc, #592]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d816      	bhi.n	8003bdc <UART_SetConfig+0xb8>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x90>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd1 	.word	0x08003bd1
 8003bbc:	08003bcb 	.word	0x08003bcb
 8003bc0:	08003bd7 	.word	0x08003bd7
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e14f      	b.n	8003e6a <UART_SetConfig+0x346>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e14c      	b.n	8003e6a <UART_SetConfig+0x346>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e149      	b.n	8003e6a <UART_SetConfig+0x346>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e146      	b.n	8003e6a <UART_SetConfig+0x346>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e143      	b.n	8003e6a <UART_SetConfig+0x346>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a84      	ldr	r2, [pc, #528]	; (8003df8 <UART_SetConfig+0x2d4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d132      	bne.n	8003c52 <UART_SetConfig+0x12e>
 8003bec:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d828      	bhi.n	8003c4c <UART_SetConfig+0x128>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <UART_SetConfig+0xdc>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c4d 	.word	0x08003c4d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c3b 	.word	0x08003c3b
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c4d 	.word	0x08003c4d
 8003c30:	08003c47 	.word	0x08003c47
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e117      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e114      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e111      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e10e      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e10b      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a69      	ldr	r2, [pc, #420]	; (8003dfc <UART_SetConfig+0x2d8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d120      	bne.n	8003c9e <UART_SetConfig+0x17a>
 8003c5c:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c66:	2b30      	cmp	r3, #48	; 0x30
 8003c68:	d013      	beq.n	8003c92 <UART_SetConfig+0x16e>
 8003c6a:	2b30      	cmp	r3, #48	; 0x30
 8003c6c:	d814      	bhi.n	8003c98 <UART_SetConfig+0x174>
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d009      	beq.n	8003c86 <UART_SetConfig+0x162>
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d810      	bhi.n	8003c98 <UART_SetConfig+0x174>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x15c>
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x168>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x174>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0f1      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0ee      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e0eb      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e0e8      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e0e5      	b.n	8003e6a <UART_SetConfig+0x346>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <UART_SetConfig+0x2dc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d120      	bne.n	8003cea <UART_SetConfig+0x1c6>
 8003ca8:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb4:	d013      	beq.n	8003cde <UART_SetConfig+0x1ba>
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d814      	bhi.n	8003ce4 <UART_SetConfig+0x1c0>
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d009      	beq.n	8003cd2 <UART_SetConfig+0x1ae>
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d810      	bhi.n	8003ce4 <UART_SetConfig+0x1c0>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <UART_SetConfig+0x1a8>
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d006      	beq.n	8003cd8 <UART_SetConfig+0x1b4>
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x1c0>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e0cb      	b.n	8003e6a <UART_SetConfig+0x346>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e0c8      	b.n	8003e6a <UART_SetConfig+0x346>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e0c5      	b.n	8003e6a <UART_SetConfig+0x346>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e0c2      	b.n	8003e6a <UART_SetConfig+0x346>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0bf      	b.n	8003e6a <UART_SetConfig+0x346>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a45      	ldr	r2, [pc, #276]	; (8003e04 <UART_SetConfig+0x2e0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d125      	bne.n	8003d40 <UART_SetConfig+0x21c>
 8003cf4:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	d017      	beq.n	8003d34 <UART_SetConfig+0x210>
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d817      	bhi.n	8003d3a <UART_SetConfig+0x216>
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d00b      	beq.n	8003d28 <UART_SetConfig+0x204>
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d811      	bhi.n	8003d3a <UART_SetConfig+0x216>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <UART_SetConfig+0x1fe>
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d006      	beq.n	8003d2e <UART_SetConfig+0x20a>
 8003d20:	e00b      	b.n	8003d3a <UART_SetConfig+0x216>
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e0a0      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e09d      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e09a      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d34:	2308      	movs	r3, #8
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e097      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e094      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a30      	ldr	r2, [pc, #192]	; (8003e08 <UART_SetConfig+0x2e4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d125      	bne.n	8003d96 <UART_SetConfig+0x272>
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d58:	d017      	beq.n	8003d8a <UART_SetConfig+0x266>
 8003d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d5e:	d817      	bhi.n	8003d90 <UART_SetConfig+0x26c>
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d64:	d00b      	beq.n	8003d7e <UART_SetConfig+0x25a>
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d811      	bhi.n	8003d90 <UART_SetConfig+0x26c>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <UART_SetConfig+0x254>
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d006      	beq.n	8003d84 <UART_SetConfig+0x260>
 8003d76:	e00b      	b.n	8003d90 <UART_SetConfig+0x26c>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e075      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e072      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d84:	2304      	movs	r3, #4
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e06f      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e06c      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e069      	b.n	8003e6a <UART_SetConfig+0x346>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <UART_SetConfig+0x2e8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d137      	bne.n	8003e10 <UART_SetConfig+0x2ec>
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dae:	d017      	beq.n	8003de0 <UART_SetConfig+0x2bc>
 8003db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003db4:	d817      	bhi.n	8003de6 <UART_SetConfig+0x2c2>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d00b      	beq.n	8003dd4 <UART_SetConfig+0x2b0>
 8003dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc0:	d811      	bhi.n	8003de6 <UART_SetConfig+0x2c2>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <UART_SetConfig+0x2aa>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d006      	beq.n	8003dda <UART_SetConfig+0x2b6>
 8003dcc:	e00b      	b.n	8003de6 <UART_SetConfig+0x2c2>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e04a      	b.n	8003e6a <UART_SetConfig+0x346>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e047      	b.n	8003e6a <UART_SetConfig+0x346>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e044      	b.n	8003e6a <UART_SetConfig+0x346>
 8003de0:	2308      	movs	r3, #8
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e041      	b.n	8003e6a <UART_SetConfig+0x346>
 8003de6:	2310      	movs	r3, #16
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e03e      	b.n	8003e6a <UART_SetConfig+0x346>
 8003dec:	efff69f3 	.word	0xefff69f3
 8003df0:	40011000 	.word	0x40011000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40004400 	.word	0x40004400
 8003dfc:	40004800 	.word	0x40004800
 8003e00:	40004c00 	.word	0x40004c00
 8003e04:	40005000 	.word	0x40005000
 8003e08:	40011400 	.word	0x40011400
 8003e0c:	40007800 	.word	0x40007800
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a71      	ldr	r2, [pc, #452]	; (8003fdc <UART_SetConfig+0x4b8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d125      	bne.n	8003e66 <UART_SetConfig+0x342>
 8003e1a:	4b71      	ldr	r3, [pc, #452]	; (8003fe0 <UART_SetConfig+0x4bc>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e28:	d017      	beq.n	8003e5a <UART_SetConfig+0x336>
 8003e2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e2e:	d817      	bhi.n	8003e60 <UART_SetConfig+0x33c>
 8003e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e34:	d00b      	beq.n	8003e4e <UART_SetConfig+0x32a>
 8003e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3a:	d811      	bhi.n	8003e60 <UART_SetConfig+0x33c>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <UART_SetConfig+0x324>
 8003e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e44:	d006      	beq.n	8003e54 <UART_SetConfig+0x330>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x33c>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e00d      	b.n	8003e6a <UART_SetConfig+0x346>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e00a      	b.n	8003e6a <UART_SetConfig+0x346>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e007      	b.n	8003e6a <UART_SetConfig+0x346>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e004      	b.n	8003e6a <UART_SetConfig+0x346>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e001      	b.n	8003e6a <UART_SetConfig+0x346>
 8003e66:	2310      	movs	r3, #16
 8003e68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d15b      	bne.n	8003f2c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d827      	bhi.n	8003eca <UART_SetConfig+0x3a6>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0x35c>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ecb 	.word	0x08003ecb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ecb 	.word	0x08003ecb
 8003e98:	08003ecb 	.word	0x08003ecb
 8003e9c:	08003ecb 	.word	0x08003ecb
 8003ea0:	08003ec3 	.word	0x08003ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7fe fbfe 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	61b8      	str	r0, [r7, #24]
        break;
 8003eaa:	e013      	b.n	8003ed4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7fe fc0e 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003eb0:	61b8      	str	r0, [r7, #24]
        break;
 8003eb2:	e00f      	b.n	8003ed4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <UART_SetConfig+0x4c0>)
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e00c      	b.n	8003ed4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7fe fb31 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003ebe:	61b8      	str	r0, [r7, #24]
        break;
 8003ec0:	e008      	b.n	8003ed4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec6:	61bb      	str	r3, [r7, #24]
        break;
 8003ec8:	e004      	b.n	8003ed4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ed2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d074      	beq.n	8003fc4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d916      	bls.n	8003f26 <UART_SetConfig+0x402>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efe:	d212      	bcs.n	8003f26 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f023 030f 	bic.w	r3, r3, #15
 8003f08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	89fa      	ldrh	r2, [r7, #14]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e04e      	b.n	8003fc4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77bb      	strb	r3, [r7, #30]
 8003f2a:	e04b      	b.n	8003fc4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d827      	bhi.n	8003f82 <UART_SetConfig+0x45e>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x414>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe fba2 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fbb2 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003f68:	61b8      	str	r0, [r7, #24]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <UART_SetConfig+0x4c0>)
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fad5 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003f76:	61b8      	str	r0, [r7, #24]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
        break;
 8003f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085a      	lsrs	r2, r3, #1
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	d908      	bls.n	8003fc0 <UART_SetConfig+0x49c>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d204      	bcs.n	8003fc0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e001      	b.n	8003fc4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40007c00 	.word	0x40007c00
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01a      	beq.n	80040fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	d10a      	bne.n	80040fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800413c:	f7fc ff5c 	bl	8000ff8 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d10e      	bne.n	800416e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f817 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e00d      	b.n	800418a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	e05e      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d05a      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fc ff24 	bl	8000ff8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11b      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e043      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d02c      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d124      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004220:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004230:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00f      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d091      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2222      	movs	r2, #34	; 0x22
 80042b4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02b      	beq.n	8004316 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <UART_Start_Receive_DMA+0xcc>)
 80042c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a24      	ldr	r2, [pc, #144]	; (800435c <UART_Start_Receive_DMA+0xd0>)
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a23      	ldr	r2, [pc, #140]	; (8004360 <UART_Start_Receive_DMA+0xd4>)
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	2200      	movs	r2, #0
 80042dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3324      	adds	r3, #36	; 0x24
 80042e8:	4619      	mov	r1, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	461a      	mov	r2, r3
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	f7fd f81d 	bl	8001330 <HAL_DMA_Start_IT>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2210      	movs	r2, #16
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e01c      	b.n	8004350 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	08004459 	.word	0x08004459
 800435c:	080044ed 	.word	0x080044ed
 8004360:	08004525 	.word	0x08004525

08004364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800437a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d107      	bne.n	80043ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0210 	bic.w	r2, r2, #16
 80043cc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d014      	beq.n	800442e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800442c:	e002      	b.n	8004434 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7fc fd76 	bl	8000f20 <HAL_UART_TxCpltCallback>
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fb4a 	bl	8003ae4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d02a      	beq.n	80044c6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004486:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0210 	bic.w	r2, r2, #16
 80044c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044d4:	4619      	mov	r1, r3
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff fb18 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044dc:	e002      	b.n	80044e4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7fc fd0a 	bl	8000ef8 <HAL_UART_RxCpltCallback>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d109      	bne.n	8004516 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	4619      	mov	r1, r3
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff fafc 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004514:	e002      	b.n	800451c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7fc fcf8 	bl	8000f0c <HAL_UART_RxHalfCpltCallback>
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004536:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d109      	bne.n	8004560 <UART_DMAError+0x3c>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b21      	cmp	r3, #33	; 0x21
 8004550:	d106      	bne.n	8004560 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f7ff ff02 	bl	8004364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d109      	bne.n	8004582 <UART_DMAError+0x5e>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d106      	bne.n	8004582 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800457c:	6978      	ldr	r0, [r7, #20]
 800457e:	f7ff ff06 	bl	800438e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	f7ff fab0 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fa9a 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fc95 	bl	8000f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004612:	f3ef 8305 	mrs	r3, IPSR
 8004616:	60bb      	str	r3, [r7, #8]
  return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	607b      	str	r3, [r7, #4]
  return(result);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800462a:	f3ef 8311 	mrs	r3, BASEPRI
 800462e:	603b      	str	r3, [r7, #0]
  return(result);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <osKernelInitialize+0x3a>
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <osKernelInitialize+0x64>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d103      	bne.n	8004646 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800463e:	f06f 0305 	mvn.w	r3, #5
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e00c      	b.n	8004660 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <osKernelInitialize+0x64>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <osKernelInitialize+0x64>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e002      	b.n	8004660 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004660:	68fb      	ldr	r3, [r7, #12]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000218 	.word	0x20000218

08004674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467a:	f3ef 8305 	mrs	r3, IPSR
 800467e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	607b      	str	r3, [r7, #4]
  return(result);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004692:	f3ef 8311 	mrs	r3, BASEPRI
 8004696:	603b      	str	r3, [r7, #0]
  return(result);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <osKernelStart+0x3a>
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <osKernelStart+0x68>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d103      	bne.n	80046ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80046a6:	f06f 0305 	mvn.w	r3, #5
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e010      	b.n	80046d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <osKernelStart+0x68>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d109      	bne.n	80046ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046b6:	f7ff ffa2 	bl	80045fe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <osKernelStart+0x68>)
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046c0:	f001 fa8e 	bl	8005be0 <vTaskStartScheduler>
      stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000218 	.word	0x20000218

080046e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b090      	sub	sp, #64	; 0x40
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f0:	f3ef 8305 	mrs	r3, IPSR
 80046f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 808f 	bne.w	800481c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004702:	61bb      	str	r3, [r7, #24]
  return(result);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470a:	f3ef 8311 	mrs	r3, BASEPRI
 800470e:	617b      	str	r3, [r7, #20]
  return(result);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osThreadNew+0x3e>
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <osThreadNew+0x148>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d07e      	beq.n	800481c <osThreadNew+0x13c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d07b      	beq.n	800481c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004728:	2318      	movs	r3, #24
 800472a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d045      	beq.n	80047c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <osThreadNew+0x6a>
        name = attr->name;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <osThreadNew+0x90>
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b38      	cmp	r3, #56	; 0x38
 8004762:	d805      	bhi.n	8004770 <osThreadNew+0x90>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <osThreadNew+0x94>
        return (NULL);
 8004770:	2300      	movs	r3, #0
 8004772:	e054      	b.n	800481e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	089b      	lsrs	r3, r3, #2
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <osThreadNew+0xca>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b5b      	cmp	r3, #91	; 0x5b
 8004792:	d90a      	bls.n	80047aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <osThreadNew+0xca>
        mem = 1;
 80047a4:	2301      	movs	r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	e010      	b.n	80047cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10c      	bne.n	80047cc <osThreadNew+0xec>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <osThreadNew+0xec>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <osThreadNew+0xec>
          mem = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	e001      	b.n	80047cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d110      	bne.n	80047f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047da:	9202      	str	r2, [sp, #8]
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f001 f84f 	bl	800588c <xTaskCreateStatic>
 80047ee:	4603      	mov	r3, r0
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e013      	b.n	800481c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d110      	bne.n	800481c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f001 f8a0 	bl	8005952 <xTaskCreate>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <osThreadNew+0x13c>
          hTask = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800481c:	693b      	ldr	r3, [r7, #16]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3730      	adds	r7, #48	; 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000218 	.word	0x20000218

0800482c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a07      	ldr	r2, [pc, #28]	; (8004858 <vApplicationGetIdleTaskMemory+0x2c>)
 800483c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a06      	ldr	r2, [pc, #24]	; (800485c <vApplicationGetIdleTaskMemory+0x30>)
 8004842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2000021c 	.word	0x2000021c
 800485c:	20000278 	.word	0x20000278

08004860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <vApplicationGetTimerTaskMemory+0x2c>)
 8004870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a06      	ldr	r2, [pc, #24]	; (8004890 <vApplicationGetTimerTaskMemory+0x30>)
 8004876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000478 	.word	0x20000478
 8004890:	200004d4 	.word	0x200004d4

08004894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0208 	add.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f103 0208 	add.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0208 	add.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d103      	bne.n	8004956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e00c      	b.n	8004970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3308      	adds	r3, #8
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e002      	b.n	8004964 <vListInsert+0x2e>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d2f6      	bcs.n	800495e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6852      	ldr	r2, [r2, #4]
 80049c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d103      	bne.n	80049dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10c      	bne.n	8004a2a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	b672      	cpsid	i
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	b662      	cpsie	i
 8004a24:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004a2a:	f002 fb87 	bl	800713c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	441a      	add	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d114      	bne.n	8004aaa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01a      	beq.n	8004abe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fb3f 	bl	8006110 <xTaskRemoveFromEventList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <xQueueGenericReset+0xd0>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	e009      	b.n	8004abe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3310      	adds	r3, #16
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fef0 	bl	8004894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3324      	adds	r3, #36	; 0x24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff feeb 	bl	8004894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004abe:	f002 fb71 	bl	80071a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ac2:	2301      	movs	r3, #1
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10c      	bne.n	8004afe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	b672      	cpsid	i
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	b662      	cpsie	i
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10c      	bne.n	8004b1e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	b672      	cpsid	i
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	b662      	cpsie	i
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <xQueueGenericCreateStatic+0x5a>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <xQueueGenericCreateStatic+0x5e>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <xQueueGenericCreateStatic+0x60>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10c      	bne.n	8004b4e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	b672      	cpsid	i
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	b662      	cpsie	i
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <xQueueGenericCreateStatic+0x8a>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <xQueueGenericCreateStatic+0x8e>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <xQueueGenericCreateStatic+0x90>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10c      	bne.n	8004b7e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	61fb      	str	r3, [r7, #28]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b7e:	2350      	movs	r3, #80	; 0x50
 8004b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b50      	cmp	r3, #80	; 0x50
 8004b86:	d00c      	beq.n	8004ba2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	b672      	cpsid	i
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	b662      	cpsie	i
 8004b9c:	61bb      	str	r3, [r7, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ba2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f847 	bl	8004c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3730      	adds	r7, #48	; 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10c      	bne.n	8004c02 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	b672      	cpsid	i
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	b662      	cpsie	i
 8004bfc:	613b      	str	r3, [r7, #16]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e004      	b.n	8004c18 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3350      	adds	r3, #80	; 0x50
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f002 fbb9 	bl	8007394 <pvPortMalloc>
 8004c22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d011      	beq.n	8004c4e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3350      	adds	r3, #80	; 0x50
 8004c32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c3c:	79fa      	ldrb	r2, [r7, #7]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f805 	bl	8004c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c86:	2101      	movs	r1, #1
 8004c88:	69b8      	ldr	r0, [r7, #24]
 8004c8a:	f7ff feb7 	bl	80049fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10c      	bne.n	8004cca <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	b672      	cpsid	i
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	b662      	cpsie	i
 8004cc4:	61bb      	str	r3, [r7, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90c      	bls.n	8004cec <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	b672      	cpsid	i
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	b662      	cpsie	i
 8004ce6:	617b      	str	r3, [r7, #20]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004cec:	2302      	movs	r3, #2
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff feea 	bl	8004ad0 <xQueueGenericCreateStatic>
 8004cfc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <xQueueGenericSend+0x36>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	b672      	cpsid	i
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	b662      	cpsie	i
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <xQueueGenericSend+0x44>
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueGenericSend+0x48>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueGenericSend+0x4a>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <xQueueGenericSend+0x68>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	b672      	cpsid	i
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	b662      	cpsie	i
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSend+0x76>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <xQueueGenericSend+0x7a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueGenericSend+0x7c>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10c      	bne.n	8004dae <xQueueGenericSend+0x9a>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	b672      	cpsid	i
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	b662      	cpsie	i
 8004da8:	623b      	str	r3, [r7, #32]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dae:	f001 fb75 	bl	800649c <xTaskGetSchedulerState>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <xQueueGenericSend+0xaa>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <xQueueGenericSend+0xae>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <xQueueGenericSend+0xb0>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <xQueueGenericSend+0xce>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	b672      	cpsid	i
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	b662      	cpsie	i
 8004ddc:	61fb      	str	r3, [r7, #28]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004de2:	f002 f9ab 	bl	800713c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <xQueueGenericSend+0xe4>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d129      	bne.n	8004e4c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfe:	f000 fbd7 	bl	80055b0 <prvCopyDataToQueue>
 8004e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 f97d 	bl	8006110 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <xQueueGenericSend+0x208>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	e00a      	b.n	8004e44 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e34:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <xQueueGenericSend+0x208>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e44:	f002 f9ae 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e063      	b.n	8004f14 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e52:	f002 f9a7 	bl	80071a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e05c      	b.n	8004f14 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f9b9 	bl	80061dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e6e:	f002 f999 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e72:	f000 ff1f 	bl	8005cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e76:	f002 f961 	bl	800713c <vPortEnterCritical>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d103      	bne.n	8004e90 <xQueueGenericSend+0x17c>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSend+0x192>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea6:	f002 f97d 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eaa:	1d3a      	adds	r2, r7, #4
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f9a8 	bl	8006208 <xTaskCheckForTimeOut>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d124      	bne.n	8004f08 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec0:	f000 fc6e 	bl	80057a0 <prvIsQueueFull>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3310      	adds	r3, #16
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f8c8 	bl	8006068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eda:	f000 fbf9 	bl	80056d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ede:	f000 fef7 	bl	8005cd0 <xTaskResumeAll>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af7c 	bne.w	8004de2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <xQueueGenericSend+0x208>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e772      	b.n	8004de2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004efe:	f000 fbe7 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f02:	f000 fee5 	bl	8005cd0 <xTaskResumeAll>
 8004f06:	e76c      	b.n	8004de2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0a:	f000 fbe1 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f0e:	f000 fedf 	bl	8005cd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3738      	adds	r7, #56	; 0x38
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <xQueueGenericSendFromISR+0x40>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericSendFromISR+0x44>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericSendFromISR+0x46>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	b672      	cpsid	i
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	b662      	cpsie	i
 8004f7e:	623b      	str	r3, [r7, #32]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d103      	bne.n	8004f92 <xQueueGenericSendFromISR+0x72>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <xQueueGenericSendFromISR+0x76>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericSendFromISR+0x78>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	b672      	cpsid	i
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	b662      	cpsie	i
 8004fb0:	61fb      	str	r3, [r7, #28]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb6:	f002 f9a9 	bl	800730c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fba:	f3ef 8211 	mrs	r2, BASEPRI
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	b672      	cpsid	i
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	b662      	cpsie	i
 8004fd2:	61ba      	str	r2, [r7, #24]
 8004fd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <xQueueGenericSendFromISR+0xcc>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d12c      	bne.n	8005046 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ffc:	f000 fad8 	bl	80055b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005000:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d112      	bne.n	8005030 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f87a 	bl	8006110 <xTaskRemoveFromEventList>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005034:	3301      	adds	r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	b25a      	sxtb	r2, r3
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005040:	2301      	movs	r3, #1
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005044:	e001      	b.n	800504a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005058:	4618      	mov	r0, r3
 800505a:	3738      	adds	r7, #56	; 0x38
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10c      	bne.n	800508e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	b672      	cpsid	i
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	b662      	cpsie	i
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <xQueueGiveFromISR+0x50>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	b672      	cpsid	i
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	b662      	cpsie	i
 80050aa:	61fb      	str	r3, [r7, #28]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <xQueueGiveFromISR+0x60>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <xQueueGiveFromISR+0x64>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <xQueueGiveFromISR+0x66>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10c      	bne.n	80050e4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	b672      	cpsid	i
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	b662      	cpsie	i
 80050de:	61bb      	str	r3, [r7, #24]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050e4:	f002 f912 	bl	800730c <vPortValidateInterruptPriority>
	__asm volatile
 80050e8:	f3ef 8211 	mrs	r2, BASEPRI
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	b672      	cpsid	i
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	b662      	cpsie	i
 8005100:	617a      	str	r2, [r7, #20]
 8005102:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005104:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005114:	429a      	cmp	r2, r3
 8005116:	d22b      	bcs.n	8005170 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800512a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d112      	bne.n	800515a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	4618      	mov	r0, r3
 8005142:	f000 ffe5 	bl	8006110 <xTaskRemoveFromEventList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e007      	b.n	800516a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800515a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800515e:	3301      	adds	r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	b25a      	sxtb	r2, r3
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800516a:	2301      	movs	r3, #1
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
 800516e:	e001      	b.n	8005174 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005170:	2300      	movs	r3, #0
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005182:	4618      	mov	r0, r3
 8005184:	3738      	adds	r7, #56	; 0x38
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08c      	sub	sp, #48	; 0x30
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005198:	2300      	movs	r3, #0
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10c      	bne.n	80051c0 <xQueueReceive+0x34>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	623b      	str	r3, [r7, #32]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <xQueueReceive+0x42>
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <xQueueReceive+0x46>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueReceive+0x48>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <xQueueReceive+0x66>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	b672      	cpsid	i
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	b662      	cpsie	i
 80051ec:	61fb      	str	r3, [r7, #28]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f2:	f001 f953 	bl	800649c <xTaskGetSchedulerState>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <xQueueReceive+0x76>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <xQueueReceive+0x7a>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueReceive+0x7c>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10c      	bne.n	8005226 <xQueueReceive+0x9a>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	b672      	cpsid	i
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	b662      	cpsie	i
 8005220:	61bb      	str	r3, [r7, #24]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005226:	f001 ff89 	bl	800713c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01f      	beq.n	8005276 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 fa23 	bl	8005684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3310      	adds	r3, #16
 8005252:	4618      	mov	r0, r3
 8005254:	f000 ff5c 	bl	8006110 <xTaskRemoveFromEventList>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <xQueueReceive+0x1c8>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526e:	f001 ff99 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8005272:	2301      	movs	r3, #1
 8005274:	e069      	b.n	800534a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527c:	f001 ff92 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005280:	2300      	movs	r3, #0
 8005282:	e062      	b.n	800534a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f000 ffa4 	bl	80061dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005298:	f001 ff84 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529c:	f000 fd0a 	bl	8005cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a0:	f001 ff4c 	bl	800713c <vPortEnterCritical>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d103      	bne.n	80052ba <xQueueReceive+0x12e>
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d103      	bne.n	80052d0 <xQueueReceive+0x144>
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d0:	f001 ff68 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d4:	1d3a      	adds	r2, r7, #4
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 ff93 	bl	8006208 <xTaskCheckForTimeOut>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d123      	bne.n	8005330 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f000 fa43 	bl	8005774 <prvIsQueueEmpty>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 feb3 	bl	8006068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f000 f9e4 	bl	80056d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005308:	f000 fce2 	bl	8005cd0 <xTaskResumeAll>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d189      	bne.n	8005226 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xQueueReceive+0x1c8>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e780      	b.n	8005226 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005326:	f000 f9d3 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f000 fcd1 	bl	8005cd0 <xTaskResumeAll>
 800532e:	e77a      	b.n	8005226 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 f9cd 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f000 fccb 	bl	8005cd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f000 fa1a 	bl	8005774 <prvIsQueueEmpty>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f43f af6f 	beq.w	8005226 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	; 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08e      	sub	sp, #56	; 0x38
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	b672      	cpsid	i
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	b662      	cpsie	i
 8005388:	623b      	str	r3, [r7, #32]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	b672      	cpsid	i
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	b662      	cpsie	i
 80053aa:	61fb      	str	r3, [r7, #28]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b0:	f001 f874 	bl	800649c <xTaskGetSchedulerState>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <xQueueSemaphoreTake+0x68>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueSemaphoreTake+0x6c>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueSemaphoreTake+0x6e>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10c      	bne.n	80053e4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	61bb      	str	r3, [r7, #24]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e4:	f001 feaa 	bl	800713c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d024      	beq.n	800543e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005404:	f001 f9c8 	bl	8006798 <pvTaskIncrementMutexHeldCount>
 8005408:	4602      	mov	r2, r0
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe78 	bl	8006110 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005426:	4b55      	ldr	r3, [pc, #340]	; (800557c <xQueueSemaphoreTake+0x224>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005436:	f001 feb5 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 800543a:	2301      	movs	r3, #1
 800543c:	e099      	b.n	8005572 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d113      	bne.n	800546c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	b672      	cpsid	i
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	b662      	cpsie	i
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005464:	f001 fe9e 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005468:	2300      	movs	r3, #0
 800546a:	e082      	b.n	8005572 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005472:	f107 030c 	add.w	r3, r7, #12
 8005476:	4618      	mov	r0, r3
 8005478:	f000 feb0 	bl	80061dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005480:	f001 fe90 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005484:	f000 fc16 	bl	8005cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005488:	f001 fe58 	bl	800713c <vPortEnterCritical>
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005492:	b25b      	sxtb	r3, r3
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d103      	bne.n	80054a2 <xQueueSemaphoreTake+0x14a>
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a8:	b25b      	sxtb	r3, r3
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d103      	bne.n	80054b8 <xQueueSemaphoreTake+0x160>
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b8:	f001 fe74 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054bc:	463a      	mov	r2, r7
 80054be:	f107 030c 	add.w	r3, r7, #12
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fe9f 	bl	8006208 <xTaskCheckForTimeOut>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d132      	bne.n	8005536 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054d2:	f000 f94f 	bl	8005774 <prvIsQueueEmpty>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d026      	beq.n	800552a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80054e4:	f001 fe2a 	bl	800713c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fff3 	bl	80064d8 <xTaskPriorityInherit>
 80054f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80054f4:	f001 fe56 	bl	80071a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	3324      	adds	r3, #36	; 0x24
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fdb1 	bl	8006068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005508:	f000 f8e2 	bl	80056d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800550c:	f000 fbe0 	bl	8005cd0 <xTaskResumeAll>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f47f af66 	bne.w	80053e4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <xQueueSemaphoreTake+0x224>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	e75c      	b.n	80053e4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800552a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800552c:	f000 f8d0 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005530:	f000 fbce 	bl	8005cd0 <xTaskResumeAll>
 8005534:	e756      	b.n	80053e4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005538:	f000 f8ca 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800553c:	f000 fbc8 	bl	8005cd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005542:	f000 f917 	bl	8005774 <prvIsQueueEmpty>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f43f af4b 	beq.w	80053e4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005554:	f001 fdf2 	bl	800713c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800555a:	f000 f811 	bl	8005580 <prvGetDisinheritPriorityAfterTimeout>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005566:	4618      	mov	r0, r3
 8005568:	f001 f890 	bl	800668c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800556c:	f001 fe1a 	bl	80071a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005572:	4618      	mov	r0, r3
 8005574:	3738      	adds	r7, #56	; 0x38
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e001      	b.n	80055a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80055a2:	68fb      	ldr	r3, [r7, #12]
	}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d14d      	bne.n	8005672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 ffe4 	bl	80065a8 <xTaskPriorityDisinherit>
 80055e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	e043      	b.n	8005672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d119      	bne.n	8005624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6858      	ldr	r0, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	f002 f8d8 	bl	80077b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	441a      	add	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d32b      	bcc.n	8005672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	e026      	b.n	8005672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68d8      	ldr	r0, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	461a      	mov	r2, r3
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	f002 f8be 	bl	80077b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	425b      	negs	r3, r3
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d207      	bcs.n	8005660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	425b      	negs	r3, r3
 800565a:	441a      	add	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d105      	bne.n	8005672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3b01      	subs	r3, #1
 8005670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800567a:	697b      	ldr	r3, [r7, #20]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	441a      	add	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d303      	bcc.n	80056b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68d9      	ldr	r1, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	461a      	mov	r2, r3
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f002 f874 	bl	80077b0 <memcpy>
	}
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d8:	f001 fd30 	bl	800713c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e4:	e011      	b.n	800570a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3324      	adds	r3, #36	; 0x24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fd0c 	bl	8006110 <xTaskRemoveFromEventList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056fe:	f000 fde9 	bl	80062d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	3b01      	subs	r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800570a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dce9      	bgt.n	80056e6 <prvUnlockQueue+0x16>
 8005712:	e000      	b.n	8005716 <prvUnlockQueue+0x46>
					break;
 8005714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800571e:	f001 fd41 	bl	80071a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005722:	f001 fd0b 	bl	800713c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800572e:	e011      	b.n	8005754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3310      	adds	r3, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fce7 	bl	8006110 <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005748:	f000 fdc4 	bl	80062d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	3b01      	subs	r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dce9      	bgt.n	8005730 <prvUnlockQueue+0x60>
 800575c:	e000      	b.n	8005760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800575e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005768:	f001 fd1c 	bl	80071a4 <vPortExitCritical>
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800577c:	f001 fcde 	bl	800713c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e001      	b.n	8005792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005792:	f001 fd07 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a8:	f001 fcc8 	bl	800713c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d102      	bne.n	80057be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e001      	b.n	80057c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fcef 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e014      	b.n	800580a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057e0:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <vQueueAddToRegistry+0x50>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005802:	e006      	b.n	8005812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d9e7      	bls.n	80057e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	200110c4 	.word	0x200110c4

08005824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005834:	f001 fc82 	bl	800713c <vPortEnterCritical>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800583e:	b25b      	sxtb	r3, r3
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d103      	bne.n	800584e <vQueueWaitForMessageRestricted+0x2a>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005854:	b25b      	sxtb	r3, r3
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d103      	bne.n	8005864 <vQueueWaitForMessageRestricted+0x40>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005864:	f001 fc9e 	bl	80071a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3324      	adds	r3, #36	; 0x24
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fc1b 	bl	80060b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800587e:	6978      	ldr	r0, [r7, #20]
 8005880:	f7ff ff26 	bl	80056d0 <prvUnlockQueue>
	}
 8005884:	bf00      	nop
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08e      	sub	sp, #56	; 0x38
 8005890:	af04      	add	r7, sp, #16
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10c      	bne.n	80058ba <xTaskCreateStatic+0x2e>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	b672      	cpsid	i
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	b662      	cpsie	i
 80058b4:	623b      	str	r3, [r7, #32]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <xTaskCreateStatic+0x4e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058da:	235c      	movs	r3, #92	; 0x5c
 80058dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b5c      	cmp	r3, #92	; 0x5c
 80058e2:	d00c      	beq.n	80058fe <xTaskCreateStatic+0x72>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	b672      	cpsid	i
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	b662      	cpsie	i
 80058f8:	61bb      	str	r3, [r7, #24]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01e      	beq.n	8005944 <xTaskCreateStatic+0xb8>
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800591e:	2300      	movs	r3, #0
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f850 	bl	80059dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800593c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800593e:	f000 f8df 	bl	8005b00 <prvAddNewTaskToReadyList>
 8005942:	e001      	b.n	8005948 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005948:	697b      	ldr	r3, [r7, #20]
	}
 800594a:	4618      	mov	r0, r3
 800594c:	3728      	adds	r7, #40	; 0x28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005952:	b580      	push	{r7, lr}
 8005954:	b08c      	sub	sp, #48	; 0x30
 8005956:	af04      	add	r7, sp, #16
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fd14 	bl	8007394 <pvPortMalloc>
 800596c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005974:	205c      	movs	r0, #92	; 0x5c
 8005976:	f001 fd0d 	bl	8007394 <pvPortMalloc>
 800597a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
 8005988:	e005      	b.n	8005996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f001 fdcc 	bl	8007528 <vPortFree>
 8005990:	e001      	b.n	8005996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d017      	beq.n	80059cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f80e 	bl	80059dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059c0:	69f8      	ldr	r0, [r7, #28]
 80059c2:	f000 f89d 	bl	8005b00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	e002      	b.n	80059d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295
 80059d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059d2:	69bb      	ldr	r3, [r7, #24]
	}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	461a      	mov	r2, r3
 80059f4:	21a5      	movs	r1, #165	; 0xa5
 80059f6:	f001 fee9 	bl	80077cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005a04:	440b      	add	r3, r1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	b672      	cpsid	i
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	b662      	cpsie	i
 8005a32:	617b      	str	r3, [r7, #20]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01f      	beq.n	8005a7e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e012      	b.n	8005a6a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	7819      	ldrb	r1, [r3, #0]
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	3334      	adds	r3, #52	; 0x34
 8005a54:	460a      	mov	r2, r1
 8005a56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b0f      	cmp	r3, #15
 8005a6e:	d9e9      	bls.n	8005a44 <prvInitialiseNewTask+0x68>
 8005a70:	e000      	b.n	8005a74 <prvInitialiseNewTask+0x98>
			{
				break;
 8005a72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	e003      	b.n	8005a86 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	2b37      	cmp	r3, #55	; 0x37
 8005a8a:	d901      	bls.n	8005a90 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a8c:	2337      	movs	r3, #55	; 0x37
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe ff14 	bl	80048d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	3318      	adds	r3, #24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe ff0f 	bl	80048d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2200      	movs	r2, #0
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	69b8      	ldr	r0, [r7, #24]
 8005ae0:	f001 fa1e 	bl	8006f20 <pxPortInitialiseStack>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af6:	bf00      	nop
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b08:	f001 fb18 	bl	800713c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <prvAddNewTaskToReadyList+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <prvAddNewTaskToReadyList+0xc4>)
 8005b14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <prvAddNewTaskToReadyList+0xc8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <prvAddNewTaskToReadyList+0xc8>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b24:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <prvAddNewTaskToReadyList+0xc4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d110      	bne.n	8005b4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b2c:	f000 fbf6 	bl	800631c <prvInitialiseTaskLists>
 8005b30:	e00d      	b.n	8005b4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <prvAddNewTaskToReadyList+0xcc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <prvAddNewTaskToReadyList+0xc8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d802      	bhi.n	8005b4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <prvAddNewTaskToReadyList+0xc8>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b4e:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <prvAddNewTaskToReadyList+0xd0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <prvAddNewTaskToReadyList+0xd0>)
 8005b56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <prvAddNewTaskToReadyList+0xd0>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <prvAddNewTaskToReadyList+0xd4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d903      	bls.n	8005b74 <prvAddNewTaskToReadyList+0x74>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <prvAddNewTaskToReadyList+0xd4>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <prvAddNewTaskToReadyList+0xd8>)
 8005b82:	441a      	add	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe feaf 	bl	80048ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b90:	f001 fb08 	bl	80071a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <prvAddNewTaskToReadyList+0xcc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <prvAddNewTaskToReadyList+0xc8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d207      	bcs.n	8005bba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <prvAddNewTaskToReadyList+0xdc>)
 8005bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000da8 	.word	0x20000da8
 8005bc8:	200008d4 	.word	0x200008d4
 8005bcc:	20000db4 	.word	0x20000db4
 8005bd0:	20000dc4 	.word	0x20000dc4
 8005bd4:	20000db0 	.word	0x20000db0
 8005bd8:	200008d8 	.word	0x200008d8
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bee:	463a      	mov	r2, r7
 8005bf0:	1d39      	adds	r1, r7, #4
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe fe18 	bl	800482c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	9202      	str	r2, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	4923      	ldr	r1, [pc, #140]	; (8005c9c <vTaskStartScheduler+0xbc>)
 8005c10:	4823      	ldr	r0, [pc, #140]	; (8005ca0 <vTaskStartScheduler+0xc0>)
 8005c12:	f7ff fe3b 	bl	800588c <xTaskCreateStatic>
 8005c16:	4603      	mov	r3, r0
 8005c18:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <vTaskStartScheduler+0xc4>)
 8005c1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <vTaskStartScheduler+0xc4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e001      	b.n	8005c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c34:	f000 fe18 	bl	8006868 <xTimerCreateTimerTask>
 8005c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d118      	bne.n	8005c72 <vTaskStartScheduler+0x92>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	b672      	cpsid	i
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	b662      	cpsie	i
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <vTaskStartScheduler+0xc8>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <vTaskStartScheduler+0xcc>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <vTaskStartScheduler+0xd0>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c6c:	f001 f9e8 	bl	8007040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c70:	e010      	b.n	8005c94 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d10c      	bne.n	8005c94 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	b672      	cpsid	i
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	b662      	cpsie	i
 8005c8e:	60fb      	str	r3, [r7, #12]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <vTaskStartScheduler+0xb2>
}
 8005c94:	bf00      	nop
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08008060 	.word	0x08008060
 8005ca0:	080062ed 	.word	0x080062ed
 8005ca4:	20000dcc 	.word	0x20000dcc
 8005ca8:	20000dc8 	.word	0x20000dc8
 8005cac:	20000db4 	.word	0x20000db4
 8005cb0:	20000dac 	.word	0x20000dac

08005cb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cb8:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <vTaskSuspendAll+0x18>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	4a03      	ldr	r2, [pc, #12]	; (8005ccc <vTaskSuspendAll+0x18>)
 8005cc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000dd0 	.word	0x20000dd0

08005cd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cde:	4b43      	ldr	r3, [pc, #268]	; (8005dec <xTaskResumeAll+0x11c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10c      	bne.n	8005d00 <xTaskResumeAll+0x30>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d00:	f001 fa1c 	bl	800713c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d04:	4b39      	ldr	r3, [pc, #228]	; (8005dec <xTaskResumeAll+0x11c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	4a38      	ldr	r2, [pc, #224]	; (8005dec <xTaskResumeAll+0x11c>)
 8005d0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0e:	4b37      	ldr	r3, [pc, #220]	; (8005dec <xTaskResumeAll+0x11c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d162      	bne.n	8005ddc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d16:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <xTaskResumeAll+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d05e      	beq.n	8005ddc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d1e:	e02f      	b.n	8005d80 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d20:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <xTaskResumeAll+0x124>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fe3b 	bl	80049a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fe36 	bl	80049a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <xTaskResumeAll+0x128>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <xTaskResumeAll+0x80>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a2a      	ldr	r2, [pc, #168]	; (8005df8 <xTaskResumeAll+0x128>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <xTaskResumeAll+0x12c>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe fdc1 	bl	80048ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <xTaskResumeAll+0x130>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005d7a:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <xTaskResumeAll+0x134>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <xTaskResumeAll+0x124>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1cb      	bne.n	8005d20 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d8e:	f000 fb65 	bl	800645c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <xTaskResumeAll+0x138>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d9e:	f000 f847 	bl	8005e30 <xTaskIncrementTick>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005da8:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <xTaskResumeAll+0x134>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f1      	bne.n	8005d9e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <xTaskResumeAll+0x138>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dc0:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <xTaskResumeAll+0x134>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTaskResumeAll+0x13c>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ddc:	f001 f9e2 	bl	80071a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005de0:	68bb      	ldr	r3, [r7, #8]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000dd0 	.word	0x20000dd0
 8005df0:	20000da8 	.word	0x20000da8
 8005df4:	20000d68 	.word	0x20000d68
 8005df8:	20000db0 	.word	0x20000db0
 8005dfc:	200008d8 	.word	0x200008d8
 8005e00:	200008d4 	.word	0x200008d4
 8005e04:	20000dbc 	.word	0x20000dbc
 8005e08:	20000db8 	.word	0x20000db8
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <xTaskGetTickCount+0x1c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e1c:	687b      	ldr	r3, [r7, #4]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000dac 	.word	0x20000dac

08005e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3a:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <xTaskIncrementTick+0x14c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 808b 	bne.w	8005f5a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	; (8005f80 <xTaskIncrementTick+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e4c:	4a4c      	ldr	r2, [pc, #304]	; (8005f80 <xTaskIncrementTick+0x150>)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d122      	bne.n	8005e9e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e58:	4b4a      	ldr	r3, [pc, #296]	; (8005f84 <xTaskIncrementTick+0x154>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	b672      	cpsid	i
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	b662      	cpsie	i
 8005e76:	603b      	str	r3, [r7, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <xTaskIncrementTick+0x4a>
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <xTaskIncrementTick+0x154>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b41      	ldr	r3, [pc, #260]	; (8005f88 <xTaskIncrementTick+0x158>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3f      	ldr	r2, [pc, #252]	; (8005f84 <xTaskIncrementTick+0x154>)
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4a3f      	ldr	r2, [pc, #252]	; (8005f88 <xTaskIncrementTick+0x158>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <xTaskIncrementTick+0x15c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a3d      	ldr	r2, [pc, #244]	; (8005f8c <xTaskIncrementTick+0x15c>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	f000 fadf 	bl	800645c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e9e:	4b3c      	ldr	r3, [pc, #240]	; (8005f90 <xTaskIncrementTick+0x160>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d349      	bcc.n	8005f3c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea8:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <xTaskIncrementTick+0x154>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <xTaskIncrementTick+0x160>)
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	601a      	str	r2, [r3, #0]
					break;
 8005eba:	e03f      	b.n	8005f3c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <xTaskIncrementTick+0x154>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d203      	bcs.n	8005edc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ed4:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <xTaskIncrementTick+0x160>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eda:	e02f      	b.n	8005f3c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fd61 	bl	80049a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fd58 	bl	80049a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <xTaskIncrementTick+0x164>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d903      	bls.n	8005f0c <xTaskIncrementTick+0xdc>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <xTaskIncrementTick+0x164>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <xTaskIncrementTick+0x168>)
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe fce3 	bl	80048ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <xTaskIncrementTick+0x16c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d3b8      	bcc.n	8005ea8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f3a:	e7b5      	b.n	8005ea8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f3c:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <xTaskIncrementTick+0x16c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	4915      	ldr	r1, [pc, #84]	; (8005f98 <xTaskIncrementTick+0x168>)
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d907      	bls.n	8005f64 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e004      	b.n	8005f64 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <xTaskIncrementTick+0x170>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a0f      	ldr	r2, [pc, #60]	; (8005fa0 <xTaskIncrementTick+0x170>)
 8005f62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <xTaskIncrementTick+0x174>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f70:	697b      	ldr	r3, [r7, #20]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000dd0 	.word	0x20000dd0
 8005f80:	20000dac 	.word	0x20000dac
 8005f84:	20000d60 	.word	0x20000d60
 8005f88:	20000d64 	.word	0x20000d64
 8005f8c:	20000dc0 	.word	0x20000dc0
 8005f90:	20000dc8 	.word	0x20000dc8
 8005f94:	20000db0 	.word	0x20000db0
 8005f98:	200008d8 	.word	0x200008d8
 8005f9c:	200008d4 	.word	0x200008d4
 8005fa0:	20000db8 	.word	0x20000db8
 8005fa4:	20000dbc 	.word	0x20000dbc

08005fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <vTaskSwitchContext+0xac>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fb6:	4b28      	ldr	r3, [pc, #160]	; (8006058 <vTaskSwitchContext+0xb0>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fbc:	e043      	b.n	8006046 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005fbe:	4b26      	ldr	r3, [pc, #152]	; (8006058 <vTaskSwitchContext+0xb0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <vTaskSwitchContext+0xb4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e012      	b.n	8005ff2 <vTaskSwitchContext+0x4a>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <vTaskSwitchContext+0x44>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	b672      	cpsid	i
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	b662      	cpsie	i
 8005fe6:	607b      	str	r3, [r7, #4]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <vTaskSwitchContext+0x42>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	491b      	ldr	r1, [pc, #108]	; (8006060 <vTaskSwitchContext+0xb8>)
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0e2      	beq.n	8005fcc <vTaskSwitchContext+0x24>
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <vTaskSwitchContext+0xb8>)
 8006012:	4413      	add	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	3308      	adds	r3, #8
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <vTaskSwitchContext+0x8e>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <vTaskSwitchContext+0xbc>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4a06      	ldr	r2, [pc, #24]	; (800605c <vTaskSwitchContext+0xb4>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6013      	str	r3, [r2, #0]
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000dd0 	.word	0x20000dd0
 8006058:	20000dbc 	.word	0x20000dbc
 800605c:	20000db0 	.word	0x20000db0
 8006060:	200008d8 	.word	0x200008d8
 8006064:	200008d4 	.word	0x200008d4

08006068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10c      	bne.n	8006092 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	b672      	cpsid	i
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	b662      	cpsie	i
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vTaskPlaceOnEventList+0x48>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3318      	adds	r3, #24
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fe fc4b 	bl	8004936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060a0:	2101      	movs	r1, #1
 80060a2:	6838      	ldr	r0, [r7, #0]
 80060a4:	f000 fb8c 	bl	80067c0 <prvAddCurrentTaskToDelayedList>
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	200008d4 	.word	0x200008d4

080060b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	b672      	cpsid	i
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	b662      	cpsie	i
 80060da:	617b      	str	r3, [r7, #20]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <vTaskPlaceOnEventListRestricted+0x58>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3318      	adds	r3, #24
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7fe fc00 	bl	80048ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	68b8      	ldr	r0, [r7, #8]
 80060fe:	f000 fb5f 	bl	80067c0 <prvAddCurrentTaskToDelayedList>
	}
 8006102:	bf00      	nop
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200008d4 	.word	0x200008d4

08006110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10c      	bne.n	8006140 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	b672      	cpsid	i
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	b662      	cpsie	i
 800613a:	60fb      	str	r3, [r7, #12]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	3318      	adds	r3, #24
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fc2f 	bl	80049a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <xTaskRemoveFromEventList+0xb4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11d      	bne.n	800618e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fc26 	bl	80049a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <xTaskRemoveFromEventList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <xTaskRemoveFromEventList+0x60>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <xTaskRemoveFromEventList+0xb8>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a13      	ldr	r2, [pc, #76]	; (80061cc <xTaskRemoveFromEventList+0xbc>)
 800617e:	441a      	add	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fbb1 	bl	80048ee <vListInsertEnd>
 800618c:	e005      	b.n	800619a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3318      	adds	r3, #24
 8006192:	4619      	mov	r1, r3
 8006194:	480e      	ldr	r0, [pc, #56]	; (80061d0 <xTaskRemoveFromEventList+0xc0>)
 8006196:	f7fe fbaa 	bl	80048ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <xTaskRemoveFromEventList+0xc4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d905      	bls.n	80061b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <xTaskRemoveFromEventList+0xc8>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e001      	b.n	80061b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000dd0 	.word	0x20000dd0
 80061c8:	20000db0 	.word	0x20000db0
 80061cc:	200008d8 	.word	0x200008d8
 80061d0:	20000d68 	.word	0x20000d68
 80061d4:	200008d4 	.word	0x200008d4
 80061d8:	20000dbc 	.word	0x20000dbc

080061dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <vTaskInternalSetTimeOutState+0x24>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <vTaskInternalSetTimeOutState+0x28>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	605a      	str	r2, [r3, #4]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000dc0 	.word	0x20000dc0
 8006204:	20000dac 	.word	0x20000dac

08006208 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10c      	bne.n	8006232 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	b672      	cpsid	i
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	b662      	cpsie	i
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	b672      	cpsid	i
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	b662      	cpsie	i
 800624c:	60fb      	str	r3, [r7, #12]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006252:	f000 ff73 	bl	800713c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <xTaskCheckForTimeOut+0xc4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d102      	bne.n	8006276 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e023      	b.n	80062be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <xTaskCheckForTimeOut+0xc8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d007      	beq.n	8006292 <xTaskCheckForTimeOut+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800628c:	2301      	movs	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e015      	b.n	80062be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	429a      	cmp	r2, r3
 800629a:	d20b      	bcs.n	80062b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff97 	bl	80061dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e004      	b.n	80062be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062be:	f000 ff71 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 80062c2:	69fb      	ldr	r3, [r7, #28]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000dac 	.word	0x20000dac
 80062d0:	20000dc0 	.word	0x20000dc0

080062d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062d8:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <vTaskMissedYield+0x14>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	bf00      	nop
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	20000dbc 	.word	0x20000dbc

080062ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062f4:	f000 f852 	bl	800639c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <prvIdleTask+0x28>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d9f9      	bls.n	80062f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <prvIdleTask+0x2c>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006310:	e7f0      	b.n	80062f4 <prvIdleTask+0x8>
 8006312:	bf00      	nop
 8006314:	200008d8 	.word	0x200008d8
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	e00c      	b.n	8006342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4a12      	ldr	r2, [pc, #72]	; (800637c <prvInitialiseTaskLists+0x60>)
 8006334:	4413      	add	r3, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe faac 	bl	8004894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3301      	adds	r3, #1
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b37      	cmp	r3, #55	; 0x37
 8006346:	d9ef      	bls.n	8006328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006348:	480d      	ldr	r0, [pc, #52]	; (8006380 <prvInitialiseTaskLists+0x64>)
 800634a:	f7fe faa3 	bl	8004894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800634e:	480d      	ldr	r0, [pc, #52]	; (8006384 <prvInitialiseTaskLists+0x68>)
 8006350:	f7fe faa0 	bl	8004894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006354:	480c      	ldr	r0, [pc, #48]	; (8006388 <prvInitialiseTaskLists+0x6c>)
 8006356:	f7fe fa9d 	bl	8004894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800635a:	480c      	ldr	r0, [pc, #48]	; (800638c <prvInitialiseTaskLists+0x70>)
 800635c:	f7fe fa9a 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006360:	480b      	ldr	r0, [pc, #44]	; (8006390 <prvInitialiseTaskLists+0x74>)
 8006362:	f7fe fa97 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <prvInitialiseTaskLists+0x78>)
 8006368:	4a05      	ldr	r2, [pc, #20]	; (8006380 <prvInitialiseTaskLists+0x64>)
 800636a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <prvInitialiseTaskLists+0x7c>)
 800636e:	4a05      	ldr	r2, [pc, #20]	; (8006384 <prvInitialiseTaskLists+0x68>)
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	200008d8 	.word	0x200008d8
 8006380:	20000d38 	.word	0x20000d38
 8006384:	20000d4c 	.word	0x20000d4c
 8006388:	20000d68 	.word	0x20000d68
 800638c:	20000d7c 	.word	0x20000d7c
 8006390:	20000d94 	.word	0x20000d94
 8006394:	20000d60 	.word	0x20000d60
 8006398:	20000d64 	.word	0x20000d64

0800639c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063a2:	e019      	b.n	80063d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063a4:	f000 feca 	bl	800713c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a8:	4b10      	ldr	r3, [pc, #64]	; (80063ec <prvCheckTasksWaitingTermination+0x50>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe faf7 	bl	80049a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <prvCheckTasksWaitingTermination+0x54>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3b01      	subs	r3, #1
 80063c0:	4a0b      	ldr	r2, [pc, #44]	; (80063f0 <prvCheckTasksWaitingTermination+0x54>)
 80063c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <prvCheckTasksWaitingTermination+0x58>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <prvCheckTasksWaitingTermination+0x58>)
 80063cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ce:	f000 fee9 	bl	80071a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f810 	bl	80063f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <prvCheckTasksWaitingTermination+0x58>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e1      	bne.n	80063a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000d7c 	.word	0x20000d7c
 80063f0:	20000da8 	.word	0x20000da8
 80063f4:	20000d90 	.word	0x20000d90

080063f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006406:	2b00      	cmp	r3, #0
 8006408:	d108      	bne.n	800641c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f88a 	bl	8007528 <vPortFree>
				vPortFree( pxTCB );
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 f887 	bl	8007528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800641a:	e01a      	b.n	8006452 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006422:	2b01      	cmp	r3, #1
 8006424:	d103      	bne.n	800642e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f87e 	bl	8007528 <vPortFree>
	}
 800642c:	e011      	b.n	8006452 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006434:	2b02      	cmp	r3, #2
 8006436:	d00c      	beq.n	8006452 <prvDeleteTCB+0x5a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	b672      	cpsid	i
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	b662      	cpsie	i
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <prvDeleteTCB+0x58>
	}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <prvResetNextTaskUnblockTime+0x38>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvResetNextTaskUnblockTime+0x3c>)
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006474:	e008      	b.n	8006488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <prvResetNextTaskUnblockTime+0x38>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <prvResetNextTaskUnblockTime+0x3c>)
 8006486:	6013      	str	r3, [r2, #0]
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000d60 	.word	0x20000d60
 8006498:	20000dc8 	.word	0x20000dc8

0800649c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <xTaskGetSchedulerState+0x34>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064aa:	2301      	movs	r3, #1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	e008      	b.n	80064c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064b0:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <xTaskGetSchedulerState+0x38>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064b8:	2302      	movs	r3, #2
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	e001      	b.n	80064c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064be:	2300      	movs	r3, #0
 80064c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064c2:	687b      	ldr	r3, [r7, #4]
	}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	20000db4 	.word	0x20000db4
 80064d4:	20000dd0 	.word	0x20000dd0

080064d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d051      	beq.n	8006592 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <xTaskPriorityInherit+0xc4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d241      	bcs.n	8006580 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db06      	blt.n	8006512 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <xTaskPriorityInherit+0xc4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6959      	ldr	r1, [r3, #20]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <xTaskPriorityInherit+0xc8>)
 8006524:	4413      	add	r3, r2
 8006526:	4299      	cmp	r1, r3
 8006528:	d122      	bne.n	8006570 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fa3a 	bl	80049a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <xTaskPriorityInherit+0xc4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <xTaskPriorityInherit+0xcc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d903      	bls.n	8006552 <xTaskPriorityInherit+0x7a>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <xTaskPriorityInherit+0xcc>)
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <xTaskPriorityInherit+0xc8>)
 8006560:	441a      	add	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7fe f9c0 	bl	80048ee <vListInsertEnd>
 800656e:	e004      	b.n	800657a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <xTaskPriorityInherit+0xc4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e008      	b.n	8006592 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <xTaskPriorityInherit+0xc4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	429a      	cmp	r2, r3
 800658c:	d201      	bcs.n	8006592 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006592:	68fb      	ldr	r3, [r7, #12]
	}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200008d4 	.word	0x200008d4
 80065a0:	200008d8 	.word	0x200008d8
 80065a4:	20000db0 	.word	0x20000db0

080065a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d05a      	beq.n	8006674 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065be:	4b30      	ldr	r3, [pc, #192]	; (8006680 <xTaskPriorityDisinherit+0xd8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d00c      	beq.n	80065e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	b672      	cpsid	i
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	b662      	cpsie	i
 80065dc:	60fb      	str	r3, [r7, #12]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10c      	bne.n	8006604 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	b672      	cpsid	i
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	b662      	cpsie	i
 80065fe:	60bb      	str	r3, [r7, #8]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006608:	1e5a      	subs	r2, r3, #1
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006616:	429a      	cmp	r2, r3
 8006618:	d02c      	beq.n	8006674 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	2b00      	cmp	r3, #0
 8006620:	d128      	bne.n	8006674 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3304      	adds	r3, #4
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe f9be 	bl	80049a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <xTaskPriorityDisinherit+0xdc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d903      	bls.n	8006654 <xTaskPriorityDisinherit+0xac>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <xTaskPriorityDisinherit+0xdc>)
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4a09      	ldr	r2, [pc, #36]	; (8006688 <xTaskPriorityDisinherit+0xe0>)
 8006662:	441a      	add	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f7fe f93f 	bl	80048ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006674:	697b      	ldr	r3, [r7, #20]
	}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200008d4 	.word	0x200008d4
 8006684:	20000db0 	.word	0x20000db0
 8006688:	200008d8 	.word	0x200008d8

0800668c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d06e      	beq.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10c      	bne.n	80066c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	b672      	cpsid	i
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	b662      	cpsie	i
 80066c0:	60fb      	str	r3, [r7, #12]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d902      	bls.n	80066d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e002      	b.n	80066dc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d04d      	beq.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d148      	bne.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066f0:	4b26      	ldr	r3, [pc, #152]	; (800678c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d10c      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	b672      	cpsid	i
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	b662      	cpsie	i
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db04      	blt.n	8006732 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	6959      	ldr	r1, [r3, #20]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006742:	4413      	add	r3, r2
 8006744:	4299      	cmp	r1, r3
 8006746:	d11c      	bne.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe f92b 	bl	80049a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d903      	bls.n	8006766 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4a07      	ldr	r2, [pc, #28]	; (8006790 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006774:	441a      	add	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3304      	adds	r3, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f7fe f8b6 	bl	80048ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006782:	bf00      	nop
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200008d4 	.word	0x200008d4
 8006790:	200008d8 	.word	0x200008d8
 8006794:	20000db0 	.word	0x20000db0

08006798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067aa:	3201      	adds	r2, #1
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 80067b0:	681b      	ldr	r3, [r3, #0]
	}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	200008d4 	.word	0x200008d4

080067c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ca:	4b21      	ldr	r3, [pc, #132]	; (8006850 <prvAddCurrentTaskToDelayedList+0x90>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d0:	4b20      	ldr	r3, [pc, #128]	; (8006854 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe f8e6 	bl	80049a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d10a      	bne.n	80067fa <prvAddCurrentTaskToDelayedList+0x3a>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4819      	ldr	r0, [pc, #100]	; (8006858 <prvAddCurrentTaskToDelayedList+0x98>)
 80067f4:	f7fe f87b 	bl	80048ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067f8:	e026      	b.n	8006848 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <prvAddCurrentTaskToDelayedList+0x94>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	429a      	cmp	r2, r3
 8006810:	d209      	bcs.n	8006826 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <prvAddCurrentTaskToDelayedList+0x94>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f7fe f889 	bl	8004936 <vListInsert>
}
 8006824:	e010      	b.n	8006848 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006826:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <prvAddCurrentTaskToDelayedList+0x94>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7fe f87f 	bl	8004936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <prvAddCurrentTaskToDelayedList+0xa4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	d202      	bcs.n	8006848 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006842:	4a08      	ldr	r2, [pc, #32]	; (8006864 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6013      	str	r3, [r2, #0]
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000dac 	.word	0x20000dac
 8006854:	200008d4 	.word	0x200008d4
 8006858:	20000d94 	.word	0x20000d94
 800685c:	20000d64 	.word	0x20000d64
 8006860:	20000d60 	.word	0x20000d60
 8006864:	20000dc8 	.word	0x20000dc8

08006868 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006872:	f000 fb15 	bl	8006ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <xTimerCreateTimerTask+0x84>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d021      	beq.n	80068c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006886:	1d3a      	adds	r2, r7, #4
 8006888:	f107 0108 	add.w	r1, r7, #8
 800688c:	f107 030c 	add.w	r3, r7, #12
 8006890:	4618      	mov	r0, r3
 8006892:	f7fd ffe5 	bl	8004860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	9202      	str	r2, [sp, #8]
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	2302      	movs	r3, #2
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	460a      	mov	r2, r1
 80068a8:	4911      	ldr	r1, [pc, #68]	; (80068f0 <xTimerCreateTimerTask+0x88>)
 80068aa:	4812      	ldr	r0, [pc, #72]	; (80068f4 <xTimerCreateTimerTask+0x8c>)
 80068ac:	f7fe ffee 	bl	800588c <xTaskCreateStatic>
 80068b0:	4603      	mov	r3, r0
 80068b2:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <xTimerCreateTimerTask+0x90>)
 80068b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <xTimerCreateTimerTask+0x90>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10c      	bne.n	80068e2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	613b      	str	r3, [r7, #16]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80068e2:	697b      	ldr	r3, [r7, #20]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000e04 	.word	0x20000e04
 80068f0:	08008068 	.word	0x08008068
 80068f4:	08006a39 	.word	0x08006a39
 80068f8:	20000e08 	.word	0x20000e08

080068fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <xTimerGenericCommand+0x32>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <xTimerGenericCommand+0x9c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02a      	beq.n	800698c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b05      	cmp	r3, #5
 8006946:	dc18      	bgt.n	800697a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006948:	f7ff fda8 	bl	800649c <xTaskGetSchedulerState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b02      	cmp	r3, #2
 8006950:	d109      	bne.n	8006966 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <xTimerGenericCommand+0x9c>)
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f107 0110 	add.w	r1, r7, #16
 800695a:	2300      	movs	r3, #0
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	f7fe f9d9 	bl	8004d14 <xQueueGenericSend>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24
 8006964:	e012      	b.n	800698c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <xTimerGenericCommand+0x9c>)
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f107 0110 	add.w	r1, r7, #16
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	f7fe f9cf 	bl	8004d14 <xQueueGenericSend>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24
 8006978:	e008      	b.n	800698c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <xTimerGenericCommand+0x9c>)
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f107 0110 	add.w	r1, r7, #16
 8006982:	2300      	movs	r3, #0
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	f7fe facb 	bl	8004f20 <xQueueGenericSendFromISR>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000e04 	.word	0x20000e04

0800699c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <prvProcessExpiredTimer+0x98>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fd fff7 	bl	80049a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d024      	beq.n	8006a12 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	18d1      	adds	r1, r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	f000 f8d3 	bl	8006b80 <prvInsertTimerInActiveList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d021      	beq.n	8006a24 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	2100      	movs	r1, #0
 80069ea:	6978      	ldr	r0, [r7, #20]
 80069ec:	f7ff ff86 	bl	80068fc <xTimerGenericCommand>
 80069f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d115      	bne.n	8006a24 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	b672      	cpsid	i
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	b662      	cpsie	i
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	6978      	ldr	r0, [r7, #20]
 8006a2a:	4798      	blx	r3
}
 8006a2c:	bf00      	nop
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000dfc 	.word	0x20000dfc

08006a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a40:	f107 0308 	add.w	r3, r7, #8
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f857 	bl	8006af8 <prvGetNextExpireTime>
 8006a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f803 	bl	8006a5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a56:	f000 f8d5 	bl	8006c04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5a:	e7f1      	b.n	8006a40 <prvTimerTask+0x8>

08006a5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a66:	f7ff f925 	bl	8005cb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f866 	bl	8006b40 <prvSampleTimeNow>
 8006a74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d130      	bne.n	8006ade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <prvProcessTimerOrBlockTask+0x3c>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d806      	bhi.n	8006a98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a8a:	f7ff f921 	bl	8005cd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff ff83 	bl	800699c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a96:	e024      	b.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <prvProcessTimerOrBlockTask+0x90>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <prvProcessTimerOrBlockTask+0x50>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <prvProcessTimerOrBlockTask+0x52>
 8006aac:	2300      	movs	r3, #0
 8006aae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <prvProcessTimerOrBlockTask+0x94>)
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	f7fe feb1 	bl	8005824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ac2:	f7ff f905 	bl	8005cd0 <xTaskResumeAll>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <prvProcessTimerOrBlockTask+0x98>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
}
 8006adc:	e001      	b.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ade:	f7ff f8f7 	bl	8005cd0 <xTaskResumeAll>
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000e00 	.word	0x20000e00
 8006af0:	20000e04 	.word	0x20000e04
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b00:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <prvGetNextExpireTime+0x44>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <prvGetNextExpireTime+0x16>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	e000      	b.n	8006b10 <prvGetNextExpireTime+0x18>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <prvGetNextExpireTime+0x44>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e001      	b.n	8006b2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000dfc 	.word	0x20000dfc

08006b40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b48:	f7ff f962 	bl	8005e10 <xTaskGetTickCount>
 8006b4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <prvSampleTimeNow+0x3c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d205      	bcs.n	8006b64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b58:	f000 f93c 	bl	8006dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <prvSampleTimeNow+0x3c>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b70:	68fb      	ldr	r3, [r7, #12]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000e0c 	.word	0x20000e0c

08006b80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d812      	bhi.n	8006bcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e01b      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <prvInsertTimerInActiveList+0x7c>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fd feb6 	bl	8004936 <vListInsert>
 8006bca:	e012      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d206      	bcs.n	8006be2 <prvInsertTimerInActiveList+0x62>
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e007      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <prvInsertTimerInActiveList+0x80>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7fd fea2 	bl	8004936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bf2:	697b      	ldr	r3, [r7, #20]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000e00 	.word	0x20000e00
 8006c00:	20000dfc 	.word	0x20000dfc

08006c04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0a:	e0d0      	b.n	8006dae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da1a      	bge.n	8006c48 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	3304      	adds	r3, #4
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	61fb      	str	r3, [r7, #28]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3e:	6850      	ldr	r0, [r2, #4]
 8006c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c42:	6892      	ldr	r2, [r2, #8]
 8006c44:	4611      	mov	r1, r2
 8006c46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f2c0 80ae 	blt.w	8006dac <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fea1 	bl	80049a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	463b      	mov	r3, r7
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff ff69 	bl	8006b40 <prvSampleTimeNow>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	f200 809b 	bhi.w	8006dae <prvProcessReceivedCommands+0x1aa>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <prvProcessReceivedCommands+0x7c>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006d21 	.word	0x08006d21
 8006c90:	08006d35 	.word	0x08006d35
 8006c94:	08006d83 	.word	0x08006d83
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006ca9 	.word	0x08006ca9
 8006ca0:	08006d21 	.word	0x08006d21
 8006ca4:	08006d35 	.word	0x08006d35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f7ff ff5a 	bl	8006b80 <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d06d      	beq.n	8006dae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d062      	beq.n	8006dae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f7ff fdff 	bl	80068fc <xTimerGenericCommand>
 8006cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d153      	bne.n	8006dae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	b672      	cpsid	i
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	b662      	cpsie	i
 8006d1a:	61bb      	str	r3, [r7, #24]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d32:	e03c      	b.n	8006dae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	617b      	str	r3, [r7, #20]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	18d1      	adds	r1, r2, r3
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7c:	f7ff ff00 	bl	8006b80 <prvInsertTimerInActiveList>
					break;
 8006d80:	e015      	b.n	8006dae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d92:	f000 fbc9 	bl	8007528 <vPortFree>
 8006d96:	e00a      	b.n	8006dae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006daa:	e000      	b.n	8006dae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <prvProcessReceivedCommands+0x1cc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	1d39      	adds	r1, r7, #4
 8006db4:	2200      	movs	r2, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f9e8 	bl	800518c <xQueueReceive>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f47f af24 	bne.w	8006c0c <prvProcessReceivedCommands+0x8>
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	3730      	adds	r7, #48	; 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000e04 	.word	0x20000e04

08006dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dda:	e04a      	b.n	8006e72 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ddc:	4b2e      	ldr	r3, [pc, #184]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fd fdd7 	bl	80049a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d030      	beq.n	8006e72 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d90e      	bls.n	8006e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f7fd fd7c 	bl	8004936 <vListInsert>
 8006e3e:	e018      	b.n	8006e72 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff fd56 	bl	80068fc <xTimerGenericCommand>
 8006e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	603b      	str	r3, [r7, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1af      	bne.n	8006ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <prvSwitchTimerLists+0xc8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e8a:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <prvSwitchTimerLists+0xc8>)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6013      	str	r3, [r2, #0]
}
 8006e90:	bf00      	nop
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000dfc 	.word	0x20000dfc
 8006e9c:	20000e00 	.word	0x20000e00

08006ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ea6:	f000 f949 	bl	800713c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d120      	bne.n	8006ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006eb2:	4814      	ldr	r0, [pc, #80]	; (8006f04 <prvCheckForValidListAndQueue+0x64>)
 8006eb4:	f7fd fcee 	bl	8004894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006eb8:	4813      	ldr	r0, [pc, #76]	; (8006f08 <prvCheckForValidListAndQueue+0x68>)
 8006eba:	f7fd fceb 	bl	8004894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <prvCheckForValidListAndQueue+0x6c>)
 8006ec0:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <prvCheckForValidListAndQueue+0x64>)
 8006ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ec4:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <prvCheckForValidListAndQueue+0x70>)
 8006ec6:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <prvCheckForValidListAndQueue+0x68>)
 8006ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <prvCheckForValidListAndQueue+0x74>)
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <prvCheckForValidListAndQueue+0x78>)
 8006ed2:	2110      	movs	r1, #16
 8006ed4:	200a      	movs	r0, #10
 8006ed6:	f7fd fdfb 	bl	8004ad0 <xQueueGenericCreateStatic>
 8006eda:	4603      	mov	r3, r0
 8006edc:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	490b      	ldr	r1, [pc, #44]	; (8006f1c <prvCheckForValidListAndQueue+0x7c>)
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fc6e 	bl	80057d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ef4:	f000 f956 	bl	80071a4 <vPortExitCritical>
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000e04 	.word	0x20000e04
 8006f04:	20000dd4 	.word	0x20000dd4
 8006f08:	20000de8 	.word	0x20000de8
 8006f0c:	20000dfc 	.word	0x20000dfc
 8006f10:	20000e00 	.word	0x20000e00
 8006f14:	20000eb0 	.word	0x20000eb0
 8006f18:	20000e10 	.word	0x20000e10
 8006f1c:	08008070 	.word	0x08008070

08006f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3b04      	subs	r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f023 0201 	bic.w	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f50:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <pxPortInitialiseStack+0x64>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b14      	subs	r3, #20
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f06f 0202 	mvn.w	r2, #2
 8006f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3b20      	subs	r3, #32
 8006f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	08006f89 	.word	0x08006f89

08006f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f92:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <prvTaskExitError+0x5c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d00c      	beq.n	8006fb6 <prvTaskExitError+0x2e>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	60fb      	str	r3, [r7, #12]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	60bb      	str	r3, [r7, #8]
}
 8006fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fce:	bf00      	nop
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0fc      	beq.n	8006fd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	2000000c 	.word	0x2000000c
	...

08006ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <prvPortStartFirstTask+0x24>)
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f380 8808 	msr	MSP, r0
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8814 	msr	CONTROL, r0
 800702a:	b662      	cpsie	i
 800702c:	b661      	cpsie	f
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	df00      	svc	0
 8007038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800703a:	bf00      	nop
 800703c:	e000ed08 	.word	0xe000ed08

08007040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <xPortStartScheduler+0xe4>)
 8007048:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <xPortStartScheduler+0xe8>)
 800706c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <xPortStartScheduler+0xec>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007074:	e009      	b.n	800708a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007076:	4b2d      	ldr	r3, [pc, #180]	; (800712c <xPortStartScheduler+0xec>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	4a2b      	ldr	r2, [pc, #172]	; (800712c <xPortStartScheduler+0xec>)
 800707e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d0ef      	beq.n	8007076 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007096:	4b25      	ldr	r3, [pc, #148]	; (800712c <xPortStartScheduler+0xec>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00c      	beq.n	80070bc <xPortStartScheduler+0x7c>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	b672      	cpsid	i
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	b662      	cpsie	i
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070bc:	4b1b      	ldr	r3, [pc, #108]	; (800712c <xPortStartScheduler+0xec>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <xPortStartScheduler+0xec>)
 80070c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070c6:	4b19      	ldr	r3, [pc, #100]	; (800712c <xPortStartScheduler+0xec>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ce:	4a17      	ldr	r2, [pc, #92]	; (800712c <xPortStartScheduler+0xec>)
 80070d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <xPortStartScheduler+0xf0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a14      	ldr	r2, [pc, #80]	; (8007130 <xPortStartScheduler+0xf0>)
 80070e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070e6:	4b12      	ldr	r3, [pc, #72]	; (8007130 <xPortStartScheduler+0xf0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a11      	ldr	r2, [pc, #68]	; (8007130 <xPortStartScheduler+0xf0>)
 80070ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070f2:	f000 f8dd 	bl	80072b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <xPortStartScheduler+0xf4>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070fc:	f000 f8fc 	bl	80072f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007100:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <xPortStartScheduler+0xf8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a0c      	ldr	r2, [pc, #48]	; (8007138 <xPortStartScheduler+0xf8>)
 8007106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800710a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800710c:	f7ff ff84 	bl	8007018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007110:	f7fe ff4a 	bl	8005fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8007114:	f7ff ff38 	bl	8006f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	e000e400 	.word	0xe000e400
 8007128:	20000f00 	.word	0x20000f00
 800712c:	20000f04 	.word	0x20000f04
 8007130:	e000ed20 	.word	0xe000ed20
 8007134:	2000000c 	.word	0x2000000c
 8007138:	e000ef34 	.word	0xe000ef34

0800713c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	b672      	cpsid	i
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	b662      	cpsie	i
 8007156:	607b      	str	r3, [r7, #4]
}
 8007158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <vPortEnterCritical+0x60>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3301      	adds	r3, #1
 8007160:	4a0e      	ldr	r2, [pc, #56]	; (800719c <vPortEnterCritical+0x60>)
 8007162:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <vPortEnterCritical+0x60>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d111      	bne.n	8007190 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <vPortEnterCritical+0x64>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <vPortEnterCritical+0x54>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	b672      	cpsid	i
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	b662      	cpsie	i
 800718a:	603b      	str	r3, [r7, #0]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vPortEnterCritical+0x52>
	}
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <vPortExitCritical+0x54>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10c      	bne.n	80071cc <vPortExitCritical+0x28>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	607b      	str	r3, [r7, #4]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <vPortExitCritical+0x54>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <vPortExitCritical+0x54>)
 80071d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <vPortExitCritical+0x54>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <vPortExitCritical+0x46>
 80071de:	2300      	movs	r3, #0
 80071e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f383 8811 	msr	BASEPRI, r3
}
 80071e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	2000000c 	.word	0x2000000c
 80071fc:	00000000 	.word	0x00000000

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007224:	b672      	cpsid	i
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	b662      	cpsie	i
 8007234:	f7fe feb8 	bl	8005fa8 <vTaskSwitchContext>
 8007238:	f04f 0000 	mov.w	r0, #0
 800723c:	f380 8811 	msr	BASEPRI, r0
 8007240:	bc09      	pop	{r0, r3}
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f01e 0f10 	tst.w	lr, #16
 800724e:	bf08      	it	eq
 8007250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007254:	f380 8809 	msr	PSP, r0
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <pxCurrentTCBConst>:
 8007260:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
 8007282:	607b      	str	r3, [r7, #4]
}
 8007284:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007286:	f7fe fdd3 	bl	8005e30 <xTaskIncrementTick>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <SysTick_Handler+0x44>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f383 8811 	msr	BASEPRI, r3
}
 80072a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <vPortSetupTimerInterrupt+0x34>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <vPortSetupTimerInterrupt+0x38>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <vPortSetupTimerInterrupt+0x3c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <vPortSetupTimerInterrupt+0x40>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	099b      	lsrs	r3, r3, #6
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <vPortSetupTimerInterrupt+0x44>)
 80072ce:	3b01      	subs	r3, #1
 80072d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <vPortSetupTimerInterrupt+0x34>)
 80072d4:	2207      	movs	r2, #7
 80072d6:	601a      	str	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	e000e010 	.word	0xe000e010
 80072e8:	e000e018 	.word	0xe000e018
 80072ec:	20000000 	.word	0x20000000
 80072f0:	10624dd3 	.word	0x10624dd3
 80072f4:	e000e014 	.word	0xe000e014

080072f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007308 <vPortEnableVFP+0x10>
 80072fc:	6801      	ldr	r1, [r0, #0]
 80072fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007302:	6001      	str	r1, [r0, #0]
 8007304:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007306:	bf00      	nop
 8007308:	e000ed88 	.word	0xe000ed88

0800730c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007312:	f3ef 8305 	mrs	r3, IPSR
 8007316:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b0f      	cmp	r3, #15
 800731c:	d916      	bls.n	800734c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800731e:	4a19      	ldr	r2, [pc, #100]	; (8007384 <vPortValidateInterruptPriority+0x78>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007328:	4b17      	ldr	r3, [pc, #92]	; (8007388 <vPortValidateInterruptPriority+0x7c>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	7afa      	ldrb	r2, [r7, #11]
 800732e:	429a      	cmp	r2, r3
 8007330:	d20c      	bcs.n	800734c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	b672      	cpsid	i
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	b662      	cpsie	i
 8007346:	607b      	str	r3, [r7, #4]
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <vPortValidateInterruptPriority+0x80>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <vPortValidateInterruptPriority+0x84>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d90c      	bls.n	8007376 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	b672      	cpsid	i
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	b662      	cpsie	i
 8007370:	603b      	str	r3, [r7, #0]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <vPortValidateInterruptPriority+0x68>
	}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	e000e3f0 	.word	0xe000e3f0
 8007388:	20000f00 	.word	0x20000f00
 800738c:	e000ed0c 	.word	0xe000ed0c
 8007390:	20000f04 	.word	0x20000f04

08007394 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073a0:	f7fe fc88 	bl	8005cb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073a4:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <pvPortMalloc+0x180>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073ac:	f000 f91a 	bl	80075e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073b0:	4b59      	ldr	r3, [pc, #356]	; (8007518 <pvPortMalloc+0x184>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4013      	ands	r3, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 8092 	bne.w	80074e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80073c4:	2208      	movs	r2, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4413      	add	r3, r2
 80073ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d016      	beq.n	8007404 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	3308      	adds	r3, #8
 80073de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <pvPortMalloc+0x70>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	617b      	str	r3, [r7, #20]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d06b      	beq.n	80074e2 <pvPortMalloc+0x14e>
 800740a:	4b44      	ldr	r3, [pc, #272]	; (800751c <pvPortMalloc+0x188>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d866      	bhi.n	80074e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007414:	4b42      	ldr	r3, [pc, #264]	; (8007520 <pvPortMalloc+0x18c>)
 8007416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007418:	4b41      	ldr	r3, [pc, #260]	; (8007520 <pvPortMalloc+0x18c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741e:	e004      	b.n	800742a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <pvPortMalloc+0xa8>
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f1      	bne.n	8007420 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800743c:	4b35      	ldr	r3, [pc, #212]	; (8007514 <pvPortMalloc+0x180>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	429a      	cmp	r2, r3
 8007444:	d04d      	beq.n	80074e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2208      	movs	r2, #8
 800744c:	4413      	add	r3, r2
 800744e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	2308      	movs	r3, #8
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	429a      	cmp	r2, r3
 8007466:	d921      	bls.n	80074ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00c      	beq.n	8007494 <pvPortMalloc+0x100>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	b672      	cpsid	i
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	b662      	cpsie	i
 800748e:	613b      	str	r3, [r7, #16]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	1ad2      	subs	r2, r2, r3
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074a6:	69b8      	ldr	r0, [r7, #24]
 80074a8:	f000 f8fe 	bl	80076a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074ac:	4b1b      	ldr	r3, [pc, #108]	; (800751c <pvPortMalloc+0x188>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	4a19      	ldr	r2, [pc, #100]	; (800751c <pvPortMalloc+0x188>)
 80074b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <pvPortMalloc+0x188>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b19      	ldr	r3, [pc, #100]	; (8007524 <pvPortMalloc+0x190>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d203      	bcs.n	80074ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <pvPortMalloc+0x188>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a16      	ldr	r2, [pc, #88]	; (8007524 <pvPortMalloc+0x190>)
 80074cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <pvPortMalloc+0x184>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074e2:	f7fe fbf5 	bl	8005cd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00c      	beq.n	800750a <pvPortMalloc+0x176>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <pvPortMalloc+0x174>
	return pvReturn;
 800750a:	69fb      	ldr	r3, [r7, #28]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3728      	adds	r7, #40	; 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20010f10 	.word	0x20010f10
 8007518:	20010f1c 	.word	0x20010f1c
 800751c:	20010f14 	.word	0x20010f14
 8007520:	20010f08 	.word	0x20010f08
 8007524:	20010f18 	.word	0x20010f18

08007528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d04c      	beq.n	80075d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800753a:	2308      	movs	r3, #8
 800753c:	425b      	negs	r3, r3
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4413      	add	r3, r2
 8007542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	4b23      	ldr	r3, [pc, #140]	; (80075dc <vPortFree+0xb4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <vPortFree+0x48>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	60fb      	str	r3, [r7, #12]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <vPortFree+0x6a>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	b672      	cpsid	i
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	b662      	cpsie	i
 800758c:	60bb      	str	r3, [r7, #8]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4b11      	ldr	r3, [pc, #68]	; (80075dc <vPortFree+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d019      	beq.n	80075d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d115      	bne.n	80075d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <vPortFree+0xb4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	401a      	ands	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075b8:	f7fe fb7c 	bl	8005cb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <vPortFree+0xb8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4413      	add	r3, r2
 80075c6:	4a06      	ldr	r2, [pc, #24]	; (80075e0 <vPortFree+0xb8>)
 80075c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ca:	6938      	ldr	r0, [r7, #16]
 80075cc:	f000 f86c 	bl	80076a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075d0:	f7fe fb7e 	bl	8005cd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075d4:	bf00      	nop
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20010f1c 	.word	0x20010f1c
 80075e0:	20010f14 	.word	0x20010f14

080075e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075f0:	4b27      	ldr	r3, [pc, #156]	; (8007690 <prvHeapInit+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3307      	adds	r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <prvHeapInit+0xac>)
 8007614:	4413      	add	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <prvHeapInit+0xb0>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <prvHeapInit+0xb0>)
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007630:	2208      	movs	r2, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <prvHeapInit+0xb4>)
 8007644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <prvHeapInit+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <prvHeapInit+0xb4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvHeapInit+0xb4>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <prvHeapInit+0xb8>)
 8007672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <prvHeapInit+0xbc>)
 800767a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvHeapInit+0xc0>)
 800767e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20000f08 	.word	0x20000f08
 8007694:	20010f08 	.word	0x20010f08
 8007698:	20010f10 	.word	0x20010f10
 800769c:	20010f18 	.word	0x20010f18
 80076a0:	20010f14 	.word	0x20010f14
 80076a4:	20010f1c 	.word	0x20010f1c

080076a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076b0:	4b28      	ldr	r3, [pc, #160]	; (8007754 <prvInsertBlockIntoFreeList+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e002      	b.n	80076bc <prvInsertBlockIntoFreeList+0x14>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d8f7      	bhi.n	80076b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d108      	bne.n	80076ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d118      	bne.n	8007730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d00d      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e008      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e003      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d002      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20010f08 	.word	0x20010f08
 8007758:	20010f10 	.word	0x20010f10

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000010 	.word	0x20000010

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f000 fc4e 	bl	800801c <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	0800811c 	.word	0x0800811c
 80077a4:	0800811c 	.word	0x0800811c
 80077a8:	0800811c 	.word	0x0800811c
 80077ac:	08008120 	.word	0x08008120

080077b0 <memcpy>:
 80077b0:	440a      	add	r2, r1
 80077b2:	4291      	cmp	r1, r2
 80077b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b8:	d100      	bne.n	80077bc <memcpy+0xc>
 80077ba:	4770      	bx	lr
 80077bc:	b510      	push	{r4, lr}
 80077be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c6:	4291      	cmp	r1, r2
 80077c8:	d1f9      	bne.n	80077be <memcpy+0xe>
 80077ca:	bd10      	pop	{r4, pc}

080077cc <memset>:
 80077cc:	4402      	add	r2, r0
 80077ce:	4603      	mov	r3, r0
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d100      	bne.n	80077d6 <memset+0xa>
 80077d4:	4770      	bx	lr
 80077d6:	f803 1b01 	strb.w	r1, [r3], #1
 80077da:	e7f9      	b.n	80077d0 <memset+0x4>

080077dc <siprintf>:
 80077dc:	b40e      	push	{r1, r2, r3}
 80077de:	b500      	push	{lr}
 80077e0:	b09c      	sub	sp, #112	; 0x70
 80077e2:	ab1d      	add	r3, sp, #116	; 0x74
 80077e4:	9002      	str	r0, [sp, #8]
 80077e6:	9006      	str	r0, [sp, #24]
 80077e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ec:	4809      	ldr	r0, [pc, #36]	; (8007814 <siprintf+0x38>)
 80077ee:	9107      	str	r1, [sp, #28]
 80077f0:	9104      	str	r1, [sp, #16]
 80077f2:	4909      	ldr	r1, [pc, #36]	; (8007818 <siprintf+0x3c>)
 80077f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f8:	9105      	str	r1, [sp, #20]
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	a902      	add	r1, sp, #8
 8007800:	f000 f868 	bl	80078d4 <_svfiprintf_r>
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	b01c      	add	sp, #112	; 0x70
 800780c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007810:	b003      	add	sp, #12
 8007812:	4770      	bx	lr
 8007814:	20000010 	.word	0x20000010
 8007818:	ffff0208 	.word	0xffff0208

0800781c <__ssputs_r>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	688e      	ldr	r6, [r1, #8]
 8007822:	429e      	cmp	r6, r3
 8007824:	4682      	mov	sl, r0
 8007826:	460c      	mov	r4, r1
 8007828:	4690      	mov	r8, r2
 800782a:	461f      	mov	r7, r3
 800782c:	d838      	bhi.n	80078a0 <__ssputs_r+0x84>
 800782e:	898a      	ldrh	r2, [r1, #12]
 8007830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007834:	d032      	beq.n	800789c <__ssputs_r+0x80>
 8007836:	6825      	ldr	r5, [r4, #0]
 8007838:	6909      	ldr	r1, [r1, #16]
 800783a:	eba5 0901 	sub.w	r9, r5, r1
 800783e:	6965      	ldr	r5, [r4, #20]
 8007840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007848:	3301      	adds	r3, #1
 800784a:	444b      	add	r3, r9
 800784c:	106d      	asrs	r5, r5, #1
 800784e:	429d      	cmp	r5, r3
 8007850:	bf38      	it	cc
 8007852:	461d      	movcc	r5, r3
 8007854:	0553      	lsls	r3, r2, #21
 8007856:	d531      	bpl.n	80078bc <__ssputs_r+0xa0>
 8007858:	4629      	mov	r1, r5
 800785a:	f000 fb39 	bl	8007ed0 <_malloc_r>
 800785e:	4606      	mov	r6, r0
 8007860:	b950      	cbnz	r0, 8007878 <__ssputs_r+0x5c>
 8007862:	230c      	movs	r3, #12
 8007864:	f8ca 3000 	str.w	r3, [sl]
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	f04f 30ff 	mov.w	r0, #4294967295
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	6921      	ldr	r1, [r4, #16]
 800787a:	464a      	mov	r2, r9
 800787c:	f7ff ff98 	bl	80077b0 <memcpy>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	6126      	str	r6, [r4, #16]
 800788e:	6165      	str	r5, [r4, #20]
 8007890:	444e      	add	r6, r9
 8007892:	eba5 0509 	sub.w	r5, r5, r9
 8007896:	6026      	str	r6, [r4, #0]
 8007898:	60a5      	str	r5, [r4, #8]
 800789a:	463e      	mov	r6, r7
 800789c:	42be      	cmp	r6, r7
 800789e:	d900      	bls.n	80078a2 <__ssputs_r+0x86>
 80078a0:	463e      	mov	r6, r7
 80078a2:	4632      	mov	r2, r6
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	4641      	mov	r1, r8
 80078a8:	f000 faa8 	bl	8007dfc <memmove>
 80078ac:	68a3      	ldr	r3, [r4, #8]
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	1b9b      	subs	r3, r3, r6
 80078b2:	4432      	add	r2, r6
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7db      	b.n	8007874 <__ssputs_r+0x58>
 80078bc:	462a      	mov	r2, r5
 80078be:	f000 fb61 	bl	8007f84 <_realloc_r>
 80078c2:	4606      	mov	r6, r0
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1e1      	bne.n	800788c <__ssputs_r+0x70>
 80078c8:	6921      	ldr	r1, [r4, #16]
 80078ca:	4650      	mov	r0, sl
 80078cc:	f000 fab0 	bl	8007e30 <_free_r>
 80078d0:	e7c7      	b.n	8007862 <__ssputs_r+0x46>
	...

080078d4 <_svfiprintf_r>:
 80078d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	4698      	mov	r8, r3
 80078da:	898b      	ldrh	r3, [r1, #12]
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	b09d      	sub	sp, #116	; 0x74
 80078e0:	4607      	mov	r7, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	4614      	mov	r4, r2
 80078e6:	d50e      	bpl.n	8007906 <_svfiprintf_r+0x32>
 80078e8:	690b      	ldr	r3, [r1, #16]
 80078ea:	b963      	cbnz	r3, 8007906 <_svfiprintf_r+0x32>
 80078ec:	2140      	movs	r1, #64	; 0x40
 80078ee:	f000 faef 	bl	8007ed0 <_malloc_r>
 80078f2:	6028      	str	r0, [r5, #0]
 80078f4:	6128      	str	r0, [r5, #16]
 80078f6:	b920      	cbnz	r0, 8007902 <_svfiprintf_r+0x2e>
 80078f8:	230c      	movs	r3, #12
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e0d1      	b.n	8007aa6 <_svfiprintf_r+0x1d2>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	616b      	str	r3, [r5, #20]
 8007906:	2300      	movs	r3, #0
 8007908:	9309      	str	r3, [sp, #36]	; 0x24
 800790a:	2320      	movs	r3, #32
 800790c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007910:	f8cd 800c 	str.w	r8, [sp, #12]
 8007914:	2330      	movs	r3, #48	; 0x30
 8007916:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ac0 <_svfiprintf_r+0x1ec>
 800791a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800791e:	f04f 0901 	mov.w	r9, #1
 8007922:	4623      	mov	r3, r4
 8007924:	469a      	mov	sl, r3
 8007926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800792a:	b10a      	cbz	r2, 8007930 <_svfiprintf_r+0x5c>
 800792c:	2a25      	cmp	r2, #37	; 0x25
 800792e:	d1f9      	bne.n	8007924 <_svfiprintf_r+0x50>
 8007930:	ebba 0b04 	subs.w	fp, sl, r4
 8007934:	d00b      	beq.n	800794e <_svfiprintf_r+0x7a>
 8007936:	465b      	mov	r3, fp
 8007938:	4622      	mov	r2, r4
 800793a:	4629      	mov	r1, r5
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff ff6d 	bl	800781c <__ssputs_r>
 8007942:	3001      	adds	r0, #1
 8007944:	f000 80aa 	beq.w	8007a9c <_svfiprintf_r+0x1c8>
 8007948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794a:	445a      	add	r2, fp
 800794c:	9209      	str	r2, [sp, #36]	; 0x24
 800794e:	f89a 3000 	ldrb.w	r3, [sl]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80a2 	beq.w	8007a9c <_svfiprintf_r+0x1c8>
 8007958:	2300      	movs	r3, #0
 800795a:	f04f 32ff 	mov.w	r2, #4294967295
 800795e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007962:	f10a 0a01 	add.w	sl, sl, #1
 8007966:	9304      	str	r3, [sp, #16]
 8007968:	9307      	str	r3, [sp, #28]
 800796a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800796e:	931a      	str	r3, [sp, #104]	; 0x68
 8007970:	4654      	mov	r4, sl
 8007972:	2205      	movs	r2, #5
 8007974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007978:	4851      	ldr	r0, [pc, #324]	; (8007ac0 <_svfiprintf_r+0x1ec>)
 800797a:	f7f8 fc51 	bl	8000220 <memchr>
 800797e:	9a04      	ldr	r2, [sp, #16]
 8007980:	b9d8      	cbnz	r0, 80079ba <_svfiprintf_r+0xe6>
 8007982:	06d0      	lsls	r0, r2, #27
 8007984:	bf44      	itt	mi
 8007986:	2320      	movmi	r3, #32
 8007988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798c:	0711      	lsls	r1, r2, #28
 800798e:	bf44      	itt	mi
 8007990:	232b      	movmi	r3, #43	; 0x2b
 8007992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007996:	f89a 3000 	ldrb.w	r3, [sl]
 800799a:	2b2a      	cmp	r3, #42	; 0x2a
 800799c:	d015      	beq.n	80079ca <_svfiprintf_r+0xf6>
 800799e:	9a07      	ldr	r2, [sp, #28]
 80079a0:	4654      	mov	r4, sl
 80079a2:	2000      	movs	r0, #0
 80079a4:	f04f 0c0a 	mov.w	ip, #10
 80079a8:	4621      	mov	r1, r4
 80079aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ae:	3b30      	subs	r3, #48	; 0x30
 80079b0:	2b09      	cmp	r3, #9
 80079b2:	d94e      	bls.n	8007a52 <_svfiprintf_r+0x17e>
 80079b4:	b1b0      	cbz	r0, 80079e4 <_svfiprintf_r+0x110>
 80079b6:	9207      	str	r2, [sp, #28]
 80079b8:	e014      	b.n	80079e4 <_svfiprintf_r+0x110>
 80079ba:	eba0 0308 	sub.w	r3, r0, r8
 80079be:	fa09 f303 	lsl.w	r3, r9, r3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	46a2      	mov	sl, r4
 80079c8:	e7d2      	b.n	8007970 <_svfiprintf_r+0x9c>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	1d19      	adds	r1, r3, #4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	9103      	str	r1, [sp, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bfbb      	ittet	lt
 80079d6:	425b      	neglt	r3, r3
 80079d8:	f042 0202 	orrlt.w	r2, r2, #2
 80079dc:	9307      	strge	r3, [sp, #28]
 80079de:	9307      	strlt	r3, [sp, #28]
 80079e0:	bfb8      	it	lt
 80079e2:	9204      	strlt	r2, [sp, #16]
 80079e4:	7823      	ldrb	r3, [r4, #0]
 80079e6:	2b2e      	cmp	r3, #46	; 0x2e
 80079e8:	d10c      	bne.n	8007a04 <_svfiprintf_r+0x130>
 80079ea:	7863      	ldrb	r3, [r4, #1]
 80079ec:	2b2a      	cmp	r3, #42	; 0x2a
 80079ee:	d135      	bne.n	8007a5c <_svfiprintf_r+0x188>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	9203      	str	r2, [sp, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bfb8      	it	lt
 80079fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a00:	3402      	adds	r4, #2
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ad0 <_svfiprintf_r+0x1fc>
 8007a08:	7821      	ldrb	r1, [r4, #0]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	f7f8 fc07 	bl	8000220 <memchr>
 8007a12:	b140      	cbz	r0, 8007a26 <_svfiprintf_r+0x152>
 8007a14:	2340      	movs	r3, #64	; 0x40
 8007a16:	eba0 000a 	sub.w	r0, r0, sl
 8007a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	4303      	orrs	r3, r0
 8007a22:	3401      	adds	r4, #1
 8007a24:	9304      	str	r3, [sp, #16]
 8007a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2a:	4826      	ldr	r0, [pc, #152]	; (8007ac4 <_svfiprintf_r+0x1f0>)
 8007a2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a30:	2206      	movs	r2, #6
 8007a32:	f7f8 fbf5 	bl	8000220 <memchr>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d038      	beq.n	8007aac <_svfiprintf_r+0x1d8>
 8007a3a:	4b23      	ldr	r3, [pc, #140]	; (8007ac8 <_svfiprintf_r+0x1f4>)
 8007a3c:	bb1b      	cbnz	r3, 8007a86 <_svfiprintf_r+0x1b2>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	3308      	adds	r3, #8
 8007a48:	9303      	str	r3, [sp, #12]
 8007a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4c:	4433      	add	r3, r6
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	e767      	b.n	8007922 <_svfiprintf_r+0x4e>
 8007a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a56:	460c      	mov	r4, r1
 8007a58:	2001      	movs	r0, #1
 8007a5a:	e7a5      	b.n	80079a8 <_svfiprintf_r+0xd4>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	3401      	adds	r4, #1
 8007a60:	9305      	str	r3, [sp, #20]
 8007a62:	4619      	mov	r1, r3
 8007a64:	f04f 0c0a 	mov.w	ip, #10
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a6e:	3a30      	subs	r2, #48	; 0x30
 8007a70:	2a09      	cmp	r2, #9
 8007a72:	d903      	bls.n	8007a7c <_svfiprintf_r+0x1a8>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0c5      	beq.n	8007a04 <_svfiprintf_r+0x130>
 8007a78:	9105      	str	r1, [sp, #20]
 8007a7a:	e7c3      	b.n	8007a04 <_svfiprintf_r+0x130>
 8007a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a80:	4604      	mov	r4, r0
 8007a82:	2301      	movs	r3, #1
 8007a84:	e7f0      	b.n	8007a68 <_svfiprintf_r+0x194>
 8007a86:	ab03      	add	r3, sp, #12
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <_svfiprintf_r+0x1f8>)
 8007a8e:	a904      	add	r1, sp, #16
 8007a90:	4638      	mov	r0, r7
 8007a92:	f3af 8000 	nop.w
 8007a96:	1c42      	adds	r2, r0, #1
 8007a98:	4606      	mov	r6, r0
 8007a9a:	d1d6      	bne.n	8007a4a <_svfiprintf_r+0x176>
 8007a9c:	89ab      	ldrh	r3, [r5, #12]
 8007a9e:	065b      	lsls	r3, r3, #25
 8007aa0:	f53f af2c 	bmi.w	80078fc <_svfiprintf_r+0x28>
 8007aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aa6:	b01d      	add	sp, #116	; 0x74
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	ab03      	add	r3, sp, #12
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <_svfiprintf_r+0x1f8>)
 8007ab4:	a904      	add	r1, sp, #16
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f000 f87a 	bl	8007bb0 <_printf_i>
 8007abc:	e7eb      	b.n	8007a96 <_svfiprintf_r+0x1c2>
 8007abe:	bf00      	nop
 8007ac0:	080080e0 	.word	0x080080e0
 8007ac4:	080080ea 	.word	0x080080ea
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	0800781d 	.word	0x0800781d
 8007ad0:	080080e6 	.word	0x080080e6

08007ad4 <_printf_common>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	4616      	mov	r6, r2
 8007ada:	4699      	mov	r9, r3
 8007adc:	688a      	ldr	r2, [r1, #8]
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfb8      	it	lt
 8007ae8:	4613      	movlt	r3, r2
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007af0:	4607      	mov	r7, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b10a      	cbz	r2, 8007afa <_printf_common+0x26>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	0699      	lsls	r1, r3, #26
 8007afe:	bf42      	ittt	mi
 8007b00:	6833      	ldrmi	r3, [r6, #0]
 8007b02:	3302      	addmi	r3, #2
 8007b04:	6033      	strmi	r3, [r6, #0]
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	f015 0506 	ands.w	r5, r5, #6
 8007b0c:	d106      	bne.n	8007b1c <_printf_common+0x48>
 8007b0e:	f104 0a19 	add.w	sl, r4, #25
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc26      	bgt.n	8007b6a <_printf_common+0x96>
 8007b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b20:	1e13      	subs	r3, r2, #0
 8007b22:	6822      	ldr	r2, [r4, #0]
 8007b24:	bf18      	it	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	0692      	lsls	r2, r2, #26
 8007b2a:	d42b      	bmi.n	8007b84 <_printf_common+0xb0>
 8007b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b30:	4649      	mov	r1, r9
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d01e      	beq.n	8007b78 <_printf_common+0xa4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	68e5      	ldr	r5, [r4, #12]
 8007b3e:	6832      	ldr	r2, [r6, #0]
 8007b40:	f003 0306 	and.w	r3, r3, #6
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	bf08      	it	eq
 8007b48:	1aad      	subeq	r5, r5, r2
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	6922      	ldr	r2, [r4, #16]
 8007b4e:	bf0c      	ite	eq
 8007b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b54:	2500      	movne	r5, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	bfc4      	itt	gt
 8007b5a:	1a9b      	subgt	r3, r3, r2
 8007b5c:	18ed      	addgt	r5, r5, r3
 8007b5e:	2600      	movs	r6, #0
 8007b60:	341a      	adds	r4, #26
 8007b62:	42b5      	cmp	r5, r6
 8007b64:	d11a      	bne.n	8007b9c <_printf_common+0xc8>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e008      	b.n	8007b7c <_printf_common+0xa8>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4638      	mov	r0, r7
 8007b72:	47c0      	blx	r8
 8007b74:	3001      	adds	r0, #1
 8007b76:	d103      	bne.n	8007b80 <_printf_common+0xac>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	3501      	adds	r5, #1
 8007b82:	e7c6      	b.n	8007b12 <_printf_common+0x3e>
 8007b84:	18e1      	adds	r1, r4, r3
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	2030      	movs	r0, #48	; 0x30
 8007b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b8e:	4422      	add	r2, r4
 8007b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b98:	3302      	adds	r3, #2
 8007b9a:	e7c7      	b.n	8007b2c <_printf_common+0x58>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d0e6      	beq.n	8007b78 <_printf_common+0xa4>
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7d9      	b.n	8007b62 <_printf_common+0x8e>
	...

08007bb0 <_printf_i>:
 8007bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4691      	mov	r9, r2
 8007bb8:	7e27      	ldrb	r7, [r4, #24]
 8007bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bbc:	2f78      	cmp	r7, #120	; 0x78
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	469a      	mov	sl, r3
 8007bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc6:	d807      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bc8:	2f62      	cmp	r7, #98	; 0x62
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x32>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f000 80d8 	beq.w	8007d82 <_printf_i+0x1d2>
 8007bd2:	2f58      	cmp	r7, #88	; 0x58
 8007bd4:	f000 80a3 	beq.w	8007d1e <_printf_i+0x16e>
 8007bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007be0:	e03a      	b.n	8007c58 <_printf_i+0xa8>
 8007be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007be6:	2b15      	cmp	r3, #21
 8007be8:	d8f6      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bea:	a001      	add	r0, pc, #4	; (adr r0, 8007bf0 <_printf_i+0x40>)
 8007bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007bd9 	.word	0x08007bd9
 8007bfc:	08007bd9 	.word	0x08007bd9
 8007c00:	08007bd9 	.word	0x08007bd9
 8007c04:	08007bd9 	.word	0x08007bd9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007bd9 	.word	0x08007bd9
 8007c10:	08007bd9 	.word	0x08007bd9
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007d69 	.word	0x08007d69
 8007c20:	08007c8d 	.word	0x08007c8d
 8007c24:	08007d4b 	.word	0x08007d4b
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d8b 	.word	0x08007d8b
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d53 	.word	0x08007d53
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	600a      	str	r2, [r1, #0]
 8007c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0a3      	b.n	8007da4 <_printf_i+0x1f4>
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	6808      	ldr	r0, [r1, #0]
 8007c60:	062e      	lsls	r6, r5, #24
 8007c62:	f100 0304 	add.w	r3, r0, #4
 8007c66:	d50a      	bpl.n	8007c7e <_printf_i+0xce>
 8007c68:	6805      	ldr	r5, [r0, #0]
 8007c6a:	600b      	str	r3, [r1, #0]
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	da03      	bge.n	8007c78 <_printf_i+0xc8>
 8007c70:	232d      	movs	r3, #45	; 0x2d
 8007c72:	426d      	negs	r5, r5
 8007c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c78:	485e      	ldr	r0, [pc, #376]	; (8007df4 <_printf_i+0x244>)
 8007c7a:	230a      	movs	r3, #10
 8007c7c:	e019      	b.n	8007cb2 <_printf_i+0x102>
 8007c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c82:	6805      	ldr	r5, [r0, #0]
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	bf18      	it	ne
 8007c88:	b22d      	sxthne	r5, r5
 8007c8a:	e7ef      	b.n	8007c6c <_printf_i+0xbc>
 8007c8c:	680b      	ldr	r3, [r1, #0]
 8007c8e:	6825      	ldr	r5, [r4, #0]
 8007c90:	1d18      	adds	r0, r3, #4
 8007c92:	6008      	str	r0, [r1, #0]
 8007c94:	0628      	lsls	r0, r5, #24
 8007c96:	d501      	bpl.n	8007c9c <_printf_i+0xec>
 8007c98:	681d      	ldr	r5, [r3, #0]
 8007c9a:	e002      	b.n	8007ca2 <_printf_i+0xf2>
 8007c9c:	0669      	lsls	r1, r5, #25
 8007c9e:	d5fb      	bpl.n	8007c98 <_printf_i+0xe8>
 8007ca0:	881d      	ldrh	r5, [r3, #0]
 8007ca2:	4854      	ldr	r0, [pc, #336]	; (8007df4 <_printf_i+0x244>)
 8007ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2308      	moveq	r3, #8
 8007caa:	230a      	movne	r3, #10
 8007cac:	2100      	movs	r1, #0
 8007cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cb2:	6866      	ldr	r6, [r4, #4]
 8007cb4:	60a6      	str	r6, [r4, #8]
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	bfa2      	ittt	ge
 8007cba:	6821      	ldrge	r1, [r4, #0]
 8007cbc:	f021 0104 	bicge.w	r1, r1, #4
 8007cc0:	6021      	strge	r1, [r4, #0]
 8007cc2:	b90d      	cbnz	r5, 8007cc8 <_printf_i+0x118>
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	d04d      	beq.n	8007d64 <_printf_i+0x1b4>
 8007cc8:	4616      	mov	r6, r2
 8007cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cce:	fb03 5711 	mls	r7, r3, r1, r5
 8007cd2:	5dc7      	ldrb	r7, [r0, r7]
 8007cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cd8:	462f      	mov	r7, r5
 8007cda:	42bb      	cmp	r3, r7
 8007cdc:	460d      	mov	r5, r1
 8007cde:	d9f4      	bls.n	8007cca <_printf_i+0x11a>
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d10b      	bne.n	8007cfc <_printf_i+0x14c>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	07df      	lsls	r7, r3, #31
 8007ce8:	d508      	bpl.n	8007cfc <_printf_i+0x14c>
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6861      	ldr	r1, [r4, #4]
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	bfde      	ittt	le
 8007cf2:	2330      	movle	r3, #48	; 0x30
 8007cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cfc:	1b92      	subs	r2, r2, r6
 8007cfe:	6122      	str	r2, [r4, #16]
 8007d00:	f8cd a000 	str.w	sl, [sp]
 8007d04:	464b      	mov	r3, r9
 8007d06:	aa03      	add	r2, sp, #12
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	f7ff fee2 	bl	8007ad4 <_printf_common>
 8007d10:	3001      	adds	r0, #1
 8007d12:	d14c      	bne.n	8007dae <_printf_i+0x1fe>
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	b004      	add	sp, #16
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	4835      	ldr	r0, [pc, #212]	; (8007df4 <_printf_i+0x244>)
 8007d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	680e      	ldr	r6, [r1, #0]
 8007d28:	061f      	lsls	r7, r3, #24
 8007d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d2e:	600e      	str	r6, [r1, #0]
 8007d30:	d514      	bpl.n	8007d5c <_printf_i+0x1ac>
 8007d32:	07d9      	lsls	r1, r3, #31
 8007d34:	bf44      	itt	mi
 8007d36:	f043 0320 	orrmi.w	r3, r3, #32
 8007d3a:	6023      	strmi	r3, [r4, #0]
 8007d3c:	b91d      	cbnz	r5, 8007d46 <_printf_i+0x196>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f023 0320 	bic.w	r3, r3, #32
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	2310      	movs	r3, #16
 8007d48:	e7b0      	b.n	8007cac <_printf_i+0xfc>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	f043 0320 	orr.w	r3, r3, #32
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	2378      	movs	r3, #120	; 0x78
 8007d54:	4828      	ldr	r0, [pc, #160]	; (8007df8 <_printf_i+0x248>)
 8007d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d5a:	e7e3      	b.n	8007d24 <_printf_i+0x174>
 8007d5c:	065e      	lsls	r6, r3, #25
 8007d5e:	bf48      	it	mi
 8007d60:	b2ad      	uxthmi	r5, r5
 8007d62:	e7e6      	b.n	8007d32 <_printf_i+0x182>
 8007d64:	4616      	mov	r6, r2
 8007d66:	e7bb      	b.n	8007ce0 <_printf_i+0x130>
 8007d68:	680b      	ldr	r3, [r1, #0]
 8007d6a:	6826      	ldr	r6, [r4, #0]
 8007d6c:	6960      	ldr	r0, [r4, #20]
 8007d6e:	1d1d      	adds	r5, r3, #4
 8007d70:	600d      	str	r5, [r1, #0]
 8007d72:	0635      	lsls	r5, r6, #24
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	d501      	bpl.n	8007d7c <_printf_i+0x1cc>
 8007d78:	6018      	str	r0, [r3, #0]
 8007d7a:	e002      	b.n	8007d82 <_printf_i+0x1d2>
 8007d7c:	0671      	lsls	r1, r6, #25
 8007d7e:	d5fb      	bpl.n	8007d78 <_printf_i+0x1c8>
 8007d80:	8018      	strh	r0, [r3, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	4616      	mov	r6, r2
 8007d88:	e7ba      	b.n	8007d00 <_printf_i+0x150>
 8007d8a:	680b      	ldr	r3, [r1, #0]
 8007d8c:	1d1a      	adds	r2, r3, #4
 8007d8e:	600a      	str	r2, [r1, #0]
 8007d90:	681e      	ldr	r6, [r3, #0]
 8007d92:	6862      	ldr	r2, [r4, #4]
 8007d94:	2100      	movs	r1, #0
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7f8 fa42 	bl	8000220 <memchr>
 8007d9c:	b108      	cbz	r0, 8007da2 <_printf_i+0x1f2>
 8007d9e:	1b80      	subs	r0, r0, r6
 8007da0:	6060      	str	r0, [r4, #4]
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	6123      	str	r3, [r4, #16]
 8007da6:	2300      	movs	r3, #0
 8007da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dac:	e7a8      	b.n	8007d00 <_printf_i+0x150>
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	4632      	mov	r2, r6
 8007db2:	4649      	mov	r1, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	47d0      	blx	sl
 8007db8:	3001      	adds	r0, #1
 8007dba:	d0ab      	beq.n	8007d14 <_printf_i+0x164>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	079b      	lsls	r3, r3, #30
 8007dc0:	d413      	bmi.n	8007dea <_printf_i+0x23a>
 8007dc2:	68e0      	ldr	r0, [r4, #12]
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	4298      	cmp	r0, r3
 8007dc8:	bfb8      	it	lt
 8007dca:	4618      	movlt	r0, r3
 8007dcc:	e7a4      	b.n	8007d18 <_printf_i+0x168>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	47d0      	blx	sl
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d09b      	beq.n	8007d14 <_printf_i+0x164>
 8007ddc:	3501      	adds	r5, #1
 8007dde:	68e3      	ldr	r3, [r4, #12]
 8007de0:	9903      	ldr	r1, [sp, #12]
 8007de2:	1a5b      	subs	r3, r3, r1
 8007de4:	42ab      	cmp	r3, r5
 8007de6:	dcf2      	bgt.n	8007dce <_printf_i+0x21e>
 8007de8:	e7eb      	b.n	8007dc2 <_printf_i+0x212>
 8007dea:	2500      	movs	r5, #0
 8007dec:	f104 0619 	add.w	r6, r4, #25
 8007df0:	e7f5      	b.n	8007dde <_printf_i+0x22e>
 8007df2:	bf00      	nop
 8007df4:	080080f1 	.word	0x080080f1
 8007df8:	08008102 	.word	0x08008102

08007dfc <memmove>:
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	eb01 0402 	add.w	r4, r1, r2
 8007e04:	d902      	bls.n	8007e0c <memmove+0x10>
 8007e06:	4284      	cmp	r4, r0
 8007e08:	4623      	mov	r3, r4
 8007e0a:	d807      	bhi.n	8007e1c <memmove+0x20>
 8007e0c:	1e43      	subs	r3, r0, #1
 8007e0e:	42a1      	cmp	r1, r4
 8007e10:	d008      	beq.n	8007e24 <memmove+0x28>
 8007e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1a:	e7f8      	b.n	8007e0e <memmove+0x12>
 8007e1c:	4402      	add	r2, r0
 8007e1e:	4601      	mov	r1, r0
 8007e20:	428a      	cmp	r2, r1
 8007e22:	d100      	bne.n	8007e26 <memmove+0x2a>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e2e:	e7f7      	b.n	8007e20 <memmove+0x24>

08007e30 <_free_r>:
 8007e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e32:	2900      	cmp	r1, #0
 8007e34:	d048      	beq.n	8007ec8 <_free_r+0x98>
 8007e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3a:	9001      	str	r0, [sp, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e42:	bfb8      	it	lt
 8007e44:	18e4      	addlt	r4, r4, r3
 8007e46:	f000 f8d3 	bl	8007ff0 <__malloc_lock>
 8007e4a:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <_free_r+0x9c>)
 8007e4c:	9801      	ldr	r0, [sp, #4]
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	4615      	mov	r5, r2
 8007e52:	b933      	cbnz	r3, 8007e62 <_free_r+0x32>
 8007e54:	6063      	str	r3, [r4, #4]
 8007e56:	6014      	str	r4, [r2, #0]
 8007e58:	b003      	add	sp, #12
 8007e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e5e:	f000 b8cd 	b.w	8007ffc <__malloc_unlock>
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	d90b      	bls.n	8007e7e <_free_r+0x4e>
 8007e66:	6821      	ldr	r1, [r4, #0]
 8007e68:	1862      	adds	r2, r4, r1
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	bf04      	itt	eq
 8007e6e:	681a      	ldreq	r2, [r3, #0]
 8007e70:	685b      	ldreq	r3, [r3, #4]
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	bf04      	itt	eq
 8007e76:	1852      	addeq	r2, r2, r1
 8007e78:	6022      	streq	r2, [r4, #0]
 8007e7a:	602c      	str	r4, [r5, #0]
 8007e7c:	e7ec      	b.n	8007e58 <_free_r+0x28>
 8007e7e:	461a      	mov	r2, r3
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	b10b      	cbz	r3, 8007e88 <_free_r+0x58>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d9fa      	bls.n	8007e7e <_free_r+0x4e>
 8007e88:	6811      	ldr	r1, [r2, #0]
 8007e8a:	1855      	adds	r5, r2, r1
 8007e8c:	42a5      	cmp	r5, r4
 8007e8e:	d10b      	bne.n	8007ea8 <_free_r+0x78>
 8007e90:	6824      	ldr	r4, [r4, #0]
 8007e92:	4421      	add	r1, r4
 8007e94:	1854      	adds	r4, r2, r1
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	6011      	str	r1, [r2, #0]
 8007e9a:	d1dd      	bne.n	8007e58 <_free_r+0x28>
 8007e9c:	681c      	ldr	r4, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	6053      	str	r3, [r2, #4]
 8007ea2:	4421      	add	r1, r4
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	e7d7      	b.n	8007e58 <_free_r+0x28>
 8007ea8:	d902      	bls.n	8007eb0 <_free_r+0x80>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	6003      	str	r3, [r0, #0]
 8007eae:	e7d3      	b.n	8007e58 <_free_r+0x28>
 8007eb0:	6825      	ldr	r5, [r4, #0]
 8007eb2:	1961      	adds	r1, r4, r5
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf04      	itt	eq
 8007eb8:	6819      	ldreq	r1, [r3, #0]
 8007eba:	685b      	ldreq	r3, [r3, #4]
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	bf04      	itt	eq
 8007ec0:	1949      	addeq	r1, r1, r5
 8007ec2:	6021      	streq	r1, [r4, #0]
 8007ec4:	6054      	str	r4, [r2, #4]
 8007ec6:	e7c7      	b.n	8007e58 <_free_r+0x28>
 8007ec8:	b003      	add	sp, #12
 8007eca:	bd30      	pop	{r4, r5, pc}
 8007ecc:	20010f20 	.word	0x20010f20

08007ed0 <_malloc_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	1ccd      	adds	r5, r1, #3
 8007ed4:	f025 0503 	bic.w	r5, r5, #3
 8007ed8:	3508      	adds	r5, #8
 8007eda:	2d0c      	cmp	r5, #12
 8007edc:	bf38      	it	cc
 8007ede:	250c      	movcc	r5, #12
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	db01      	blt.n	8007eea <_malloc_r+0x1a>
 8007ee6:	42a9      	cmp	r1, r5
 8007ee8:	d903      	bls.n	8007ef2 <_malloc_r+0x22>
 8007eea:	230c      	movs	r3, #12
 8007eec:	6033      	str	r3, [r6, #0]
 8007eee:	2000      	movs	r0, #0
 8007ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef2:	f000 f87d 	bl	8007ff0 <__malloc_lock>
 8007ef6:	4921      	ldr	r1, [pc, #132]	; (8007f7c <_malloc_r+0xac>)
 8007ef8:	680a      	ldr	r2, [r1, #0]
 8007efa:	4614      	mov	r4, r2
 8007efc:	b99c      	cbnz	r4, 8007f26 <_malloc_r+0x56>
 8007efe:	4f20      	ldr	r7, [pc, #128]	; (8007f80 <_malloc_r+0xb0>)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	b923      	cbnz	r3, 8007f0e <_malloc_r+0x3e>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 f862 	bl	8007fd0 <_sbrk_r>
 8007f0c:	6038      	str	r0, [r7, #0]
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 f85d 	bl	8007fd0 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d123      	bne.n	8007f62 <_malloc_r+0x92>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f000 f86c 	bl	8007ffc <__malloc_unlock>
 8007f24:	e7e3      	b.n	8007eee <_malloc_r+0x1e>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	1b5b      	subs	r3, r3, r5
 8007f2a:	d417      	bmi.n	8007f5c <_malloc_r+0x8c>
 8007f2c:	2b0b      	cmp	r3, #11
 8007f2e:	d903      	bls.n	8007f38 <_malloc_r+0x68>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	441c      	add	r4, r3
 8007f34:	6025      	str	r5, [r4, #0]
 8007f36:	e004      	b.n	8007f42 <_malloc_r+0x72>
 8007f38:	6863      	ldr	r3, [r4, #4]
 8007f3a:	42a2      	cmp	r2, r4
 8007f3c:	bf0c      	ite	eq
 8007f3e:	600b      	streq	r3, [r1, #0]
 8007f40:	6053      	strne	r3, [r2, #4]
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 f85a 	bl	8007ffc <__malloc_unlock>
 8007f48:	f104 000b 	add.w	r0, r4, #11
 8007f4c:	1d23      	adds	r3, r4, #4
 8007f4e:	f020 0007 	bic.w	r0, r0, #7
 8007f52:	1ac2      	subs	r2, r0, r3
 8007f54:	d0cc      	beq.n	8007ef0 <_malloc_r+0x20>
 8007f56:	1a1b      	subs	r3, r3, r0
 8007f58:	50a3      	str	r3, [r4, r2]
 8007f5a:	e7c9      	b.n	8007ef0 <_malloc_r+0x20>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	6864      	ldr	r4, [r4, #4]
 8007f60:	e7cc      	b.n	8007efc <_malloc_r+0x2c>
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d0e3      	beq.n	8007f34 <_malloc_r+0x64>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f82e 	bl	8007fd0 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1dd      	bne.n	8007f34 <_malloc_r+0x64>
 8007f78:	e7cf      	b.n	8007f1a <_malloc_r+0x4a>
 8007f7a:	bf00      	nop
 8007f7c:	20010f20 	.word	0x20010f20
 8007f80:	20010f24 	.word	0x20010f24

08007f84 <_realloc_r>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	4607      	mov	r7, r0
 8007f88:	4614      	mov	r4, r2
 8007f8a:	460e      	mov	r6, r1
 8007f8c:	b921      	cbnz	r1, 8007f98 <_realloc_r+0x14>
 8007f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f92:	4611      	mov	r1, r2
 8007f94:	f7ff bf9c 	b.w	8007ed0 <_malloc_r>
 8007f98:	b922      	cbnz	r2, 8007fa4 <_realloc_r+0x20>
 8007f9a:	f7ff ff49 	bl	8007e30 <_free_r>
 8007f9e:	4625      	mov	r5, r4
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa4:	f000 f830 	bl	8008008 <_malloc_usable_size_r>
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	d20f      	bcs.n	8007fcc <_realloc_r+0x48>
 8007fac:	4621      	mov	r1, r4
 8007fae:	4638      	mov	r0, r7
 8007fb0:	f7ff ff8e 	bl	8007ed0 <_malloc_r>
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d0f2      	beq.n	8007fa0 <_realloc_r+0x1c>
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	f7ff fbf7 	bl	80077b0 <memcpy>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f7ff ff33 	bl	8007e30 <_free_r>
 8007fca:	e7e9      	b.n	8007fa0 <_realloc_r+0x1c>
 8007fcc:	4635      	mov	r5, r6
 8007fce:	e7e7      	b.n	8007fa0 <_realloc_r+0x1c>

08007fd0 <_sbrk_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d06      	ldr	r5, [pc, #24]	; (8007fec <_sbrk_r+0x1c>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	f7f8 fd58 	bl	8000a90 <_sbrk>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_sbrk_r+0x1a>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_sbrk_r+0x1a>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20011104 	.word	0x20011104

08007ff0 <__malloc_lock>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__malloc_lock+0x8>)
 8007ff2:	f000 b811 	b.w	8008018 <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	2001110c 	.word	0x2001110c

08007ffc <__malloc_unlock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__malloc_unlock+0x8>)
 8007ffe:	f000 b80c 	b.w	800801a <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	2001110c 	.word	0x2001110c

08008008 <_malloc_usable_size_r>:
 8008008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800800c:	1f18      	subs	r0, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfbc      	itt	lt
 8008012:	580b      	ldrlt	r3, [r1, r0]
 8008014:	18c0      	addlt	r0, r0, r3
 8008016:	4770      	bx	lr

08008018 <__retarget_lock_acquire_recursive>:
 8008018:	4770      	bx	lr

0800801a <__retarget_lock_release_recursive>:
 800801a:	4770      	bx	lr

0800801c <_init>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr

08008028 <_fini>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr
